"use strict";
var SIMDope = function() { return {
    binary_and(a, b) { return a & b; },
    binary_or(a, b) { return a | b; },
    binary_xor(a, b) { return a ^ b; },
    binary_add(a, b) { return a + b; },
    binary_sub(a, b) { return a - b; },
    binary_mul(a, b) { return a * b; },
    binary_div(a, b) { return a / b; },
    binary_equal(a, b) { return a == b; },
    binary_not_equal(a, b) { return a != b; },
    binary_less(a, b) { return a < b; },
    binary_less_equal(a, b) { return a <= b; },
    binary_greater(a, b) { return a > b; },
    binary_greater_equal(a, b) { return a >= b; },
    binary_shift_left(a, bits) { return a << bits; },
    binary_shift_right_arithmetic(a, bits) { return a >> bits; },
    binary_shift_right_logical(a, bits) { return a >>> bits; },
    plus_int(a, b) {return a+b|0; },
    minus_int(a, b) { return a-b|0; },
    plus_uint(a, b) {return (a+b|0)>>>0; },
    minus_uint(a, b) { return (a-b|0)>>>0; },
    divide_four_uint(n) { return (n>>2|0)>>>0; },
    abs_int(n) {return (n ^ (n >> 31)) - (n >> 31); },
    max_int(a, b) {return a - ((a - b) & ((a - b) >> 31)); },
    min_int(a, b) {return a - ((a - b) & ((b - a) >> 31)); },
    clamp_int( x, min, max ) {x = x - ((x - max) & ((max - x) >> 31));return x - ((x - min) & ((x - min) >> 31)); },
    clamp_uint8(n) {return (n|0) & 0xFF; },
    clamp_uint32(n) {return (n|0) & 0xFFFFFFFF; },
    int_equal(a, b) { return (a|0) == (b|0); },
    int_not_equal(a, b) { return (a|0) != (b|0); },
    int_less(a, b) { return (a|0) < (b|0); },
    int_less_equal(a, b) { return (a|0) <= (b|0); },
    int_greater(a, b) { return (a|0) > (b|0); },
    int_greater_equal(a, b) { return (a|0) >= (b|0); },
}};

module.exports = SIMDope;