!function(s){function e(e){for(var t,n,r=e[0],a=e[1],i=e[2],l=0,o=[];l<r.length;l++)n=r[l],Object.prototype.hasOwnProperty.call(u,n)&&u[n]&&o.push(u[n][0]),u[n]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(s[t]=a[t]);for(d&&d(e);o.length;)o.shift()();return f.push.apply(f,i||[]),c()}function c(){for(var e,t=0;t<f.length;t++){for(var n=f[t],r=!0,a=1;a<n.length;a++){var i=n[a];0!==u[i]&&(r=!1)}r&&(f.splice(t--,1),e=h(h.s=n[0]))}return e}var n={},u={"main~5782b8df":0},f=[];function h(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return s[e].call(t.exports,t,t.exports,h),t.l=!0,t.exports}h.e=function(r){var e,a,i,t,l,n=[],o=u[r];return 0!==o&&(o?n.push(o[2]):(e=new Promise(function(e,t){o=u[r]=[e,t]}),n.push(o[2]=e),(a=document.createElement("script")).charset="utf-8",a.timeout=120,h.nc&&a.setAttribute("nonce",h.nc),a.src=h.p+"child-chunk."+r+".min.js",i=new Error,t=function(e){a.onerror=a.onload=null,clearTimeout(l);var t,n=u[r];0!==n&&(n&&(t=e&&("load"===e.type?"missing":e.type),e=e&&e.target&&e.target.src,i.message="Loading chunk "+r+" failed.\n("+t+": "+e+")",i.name="ChunkLoadError",i.type=t,i.request=e,n[1](i)),u[r]=void 0)},l=setTimeout(function(){t({type:"timeout",target:a})},12e4),a.onerror=a.onload=t,document.head.appendChild(a))),Promise.all(n)},h.m=s,h.c=n,h.d=function(e,t,n){h.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},h.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},h.t=function(t,e){if(1&e&&(t=h(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(h.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)h.d(n,r,function(e){return t[e]}.bind(null,r));return n},h.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return h.d(t,"a",t),t},h.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},h.p="",h.oe=function(e){throw e};var t=(r=window.webpackJsonp=window.webpackJsonp||[]).push.bind(r);r.push=e;for(var r=r.slice(),a=0;a<r.length;a++)e(r[a]);var d=t;f.push([508,"main~748942c6","main~253ae210","main~9acc357d","main~5a2dc592","main~1f20a385","main~c1dd23ef","main~f9ca8911","main~af9f4ef7"]),c()}({136:function(e,t,n){"use strict";var r=a(n(443)),i=(a(n(0)),a(n(445)));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],a=r.default.renderToString(e);return t&&a.match(/(?:#)[0-9a-f]{8}|(?:#)[0-9a-f]{6}|(?:#)[0-9a-f]{4}|(?:#)[0-9a-f]{3}/gi).forEach(function(e){var t=function(e){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e){var t=[],n=!0,r=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(n=(i=l.next()).done)&&(t.push(i.value),3!==t.length);n=!0);}catch(e){r=!0,a=e}finally{try{!n&&l.return&&l.return()}finally{if(r)throw a}}return t}(e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}(e.match(/\w\w/g).map(function(e){return parseInt(e,16)})),n=t[0],r=t[1],t=t[2],t=(t=r=n=Math.round((n+r+t)/3),n=n.toString(16),r=r.toString(16),t=t.toString(16),"#"+(n=1==n.length?"0"+n:n)+(r=1==r.length?"0"+r:r)+(t=1==t.length?"0"+t:t));a=a.replace(e,t)}),(0,i.default)(a)}},137:function(e,t,n){"use strict";function p(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var l,o=e[Symbol.iterator]();!(r=(l=o.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{!r&&o.return&&o.return()}finally{if(a)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}var v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=n(61),r=l(n(421)),i=l(n(428)),w=l(n(313)),b=n(430);function l(e){return e&&e.__esModule?e:{default:e}}function y(e,t){return v({},e,t)}function g(){var n,r,e=2===(0,i.default)()[0].split("-").length?(0,i.default)()[0]:"en-US";return{locales:e,currency:(n=2===(e=e).split("-").length?e.split("-")[1]:"US",r="USD",Object.entries(a.CURRENCY_COUNTRIES).forEach(function(e){var t=p(e,2),e=t[0];t[1].includes(n)&&(r=e)}),r),manual_warning_enabled:!0,sfx_enabled:!0,jamy_enabled:!0,enable_3d:!1,music_enabled:!1,onboarding:!0,attachment_previews:{}}}window.settings_db=new r.default("settings_db",{deterministic_revs:!1,revs_limit:0}),e.exports={reset_all_databases:function(e){delete window._pixa_settings,Promise.all([window.settings_db.destroy()]).then(function(){e()})},get_settings:function(){var i=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,l=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;void 0===window._pixa_settings||null===window._pixa_settings||void 0===window._pixa_settings.locales||null===window._pixa_settings.locales||l.length?window.settings_db.allDocs({include_docs:!0,descending:!1},function(t,e){var n,r=!1;if(!t){var a,e=e.rows.map(function(e){return e.doc}).sort(function(e,t){return new Date(t.timestamp)-new Date(e.timestamp)});if(void 0!==e[0])try{null!==o?window.settings_db.get(e[0]._id,{rev:e[0]._rev,attachments:Boolean(l.length||"all"===l),binary:Boolean(l.length||"all"===l)}).then(function(e){var t=JSON.parse(e.info);window._pixa_settings=v({},t),i&&i(null,v({},t));var n=[];Object.entries(e._attachments).forEach(function(e){var t=p(e,2),e=t[0],t=t[1];"all"!==l&&!l.includes(e)||(n[e]=t.data)}),Object.entries(n).forEach(function(e){e=p(e,2);e[0],e[1].arrayBuffer().then(function(e){e=new Uint8Array(e);(0,b.LZP3)(e,"DECOMPRESS_UINT8A",function(e){o(null,e)},w.default)})})}).catch(function(e){t=e}):(a=JSON.parse(e[0].info),window._pixa_settings=v({},a),i&&i(null,v({},a)))}catch(e){t=e}else r=!0}r?(n=g(),window.settings_db.post({info:JSON.stringify(n),timestamp:Date.now()}).then(function(e){window._pixa_settings=v({},n),null!==i&&i(null,v({},n))})):t&&i(t,null)}):i(null,v({},window._pixa_settings))},set_settings:function(){var i=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},d=1<arguments.length&&void 0!==arguments[1]?arguments[1]:function(){},m=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};window.settings_db.allDocs({include_docs:!0,descending:!1,attachments:Boolean(Object.keys(m).length),binary:Boolean(Object.keys(m).length)},function(t,e){var o,s,c,n,r=!1;if(!t){var l,u,f,a,h=e.rows.map(function(e){return e.doc}).sort(function(e,t){return new Date(t.timestamp)-new Date(e.timestamp)});if(void 0!==h[0])try{1<=Object.keys(m).length?(l=y(JSON.parse(h[0].info),i),u=Object.keys(m).length,Object.entries(m).forEach(function(e){var t,n,r=p(e,2),a=r[0],i=r[1];"delete"!==i?(t=i.id,n=i.kb,e=i.preview,r=i.timestamp,l.attachment_previews=l.attachment_previews||{},l.attachment_previews[a]={id:t,kb:n,preview:e,timestamp:r},window._pixa_settings=v({},l),d(null,v({},l)),(0,b.LZP3)(i,"COMPRESS_OBJECT",function(e){h[0]._attachments=h[0]._attachments||{},h[0]._attachments[a]={content_type:"application/octet-stream",data:new Blob([e],{type:"application/octet-stream"})},0==--u&&f(h,l)},w.default)):(l.attachment_previews=l.attachment_previews||{},delete l.attachment_previews[a],window._pixa_settings=v({},l),d(null,v({},l)),window.settings_db.removeAttachment(h[0]._id,a,h[0]._rev).then(function(e){0==--u&&f(h,l)}))}),f=function(t,e){window.settings_db.put({_id:t[0]._id,_rev:t[0]._rev,info:JSON.stringify(e),timestamp:Date.now(),_attachments:t[0]._attachments},{force:!0}).then(function(e){0<t.length&&(t.splice(0,1),window.settings_db.bulkDocs(t.map(function(e){return{_id:e._id,_rev:e._rev,_deleted:!0,timestamp:0,data:null,info:null,_attachments:{}}}),{force:!0})),window.settings_db.compact(),window.settings_db.viewCleanup()})}):(a=y(JSON.parse(h[0].info),i),window.settings_db.get(h[0]._id,{rev:h[0]._rev}).then(function(e){window.settings_db.put({_id:e._id,_rev:e._rev,info:JSON.stringify(a),timestamp:Date.now()},{force:!0}).then(function(e){0<h.length&&(h.splice(0,1),window.settings_db.bulkDocs(h.map(function(e){return{_id:e._id,_rev:e._rev,_deleted:!0,timestamp:0,data:null,info:null,_attachments:{}}}),{force:!0})),window._pixa_settings=v({},a),d(null,v({},a))})}))}catch(e){t=e}else r=!0}r?0<Object.keys(m).length?(o={},s=m.length,Object.entries(m).forEach(function(e){var t=p(e,2),n=t[0],r=t[1],a=g(),i=r.id,l=r.kb,e=r.preview,t=r.timestamp;a.attachment_previews=a.attachment_previews||{},a.attachment_previews[n]={id:i,kb:l,preview:e,timestamp:t},(0,b.LZP3)(r,"COMPRESS_OBJECT",function(e){o[n]={content_type:"application/octet-stream",data:new Blob([e],{type:"application/octet-stream"})},0==--s&&c(o,a)},w.default)}),c=function(e,t){window.settings_db.post({info:JSON.stringify(t),timestamp:Date.now(),_attachments:e}).then(function(e){window._pixa_settings=v({},t),d(null,v({},t)),window.settings_db.compact(),window.settings_db.viewCleanup()})}):(n=g(),window.settings_db.post({info:JSON.stringify(n),timestamp:Date.now()}).then(function(e){window._pixa_settings=v({},n),d(null,v({},n))})):t&&d(t,null)})}}},313:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n=n(429),n=n&&n.__esModule?n:{default:n};t.default=n.default.pool(null,{minWorkers:"max"})},341:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#006C35",d:"M32 5H4a4 4 0 00-4 4v18a4 4 0 004 4h28a4 4 0 004-4V9a4 4 0 00-4-4z"}),a.createElement("g",{fill:"#FFF"},a.createElement("path",{d:"M8.919 14.05c.632.06.283-1.069.512-1.274.043-.101.123-.102.129.026v.958c-.006.312.199.403.358.468.166-.013.276-.007.341.154l.078 1.658s.384.11.402-.933c.019-.612-.122-1.124-.039-1.243.003-.117.152-.124.256-.067.165.116.239.26.495.203.391-.107.625-.297.631-.597-.023-.285-.055-.57-.178-.855.017-.052-.075-.186-.058-.238.07.11.177.101.201 0-.066-.219-.169-.429-.337-.52-.138-.122-.34-.097-.414.157-.034.292.106.64.318.923.045.111.109.295.081.461-.113.064-.227.038-.321-.062 0 0-.311-.233-.311-.285.083-.528.019-.588-.027-.734-.032-.202-.128-.267-.206-.405-.078-.082-.183-.082-.233 0-.138.238-.074.75.026.979.071.21.181.343.129.343-.043.119-.131.091-.195-.046-.092-.284-.11-.707-.11-.898-.028-.236-.058-.741-.213-.869-.095-.129-.236-.067-.285.052-.01.234-.012.469.015.686.106.379.14.713.192 1.102.014.521-.301.226-.287-.032.073-.335.054-.863-.011-.997-.051-.133-.112-.167-.236-.145-.098-.008-.352.27-.424.73 0 0-.061.237-.087.448-.035.238-.191.406-.301-.033-.095-.319-.153-1.106-.312-.922-.046.615-.101 1.697.421 1.807z"}),a.createElement("path",{d:"M9.87 14.499c-.52.01-1.281.683-1.302 1.056.548-.264 1.087-.518 1.645-.79-.09-.135-.005-.256-.343-.266z"}),a.createElement("path",{d:"M12.737 16.516c.241-.803-.039-1.395.092-1.392.277.299.665.04.75-.064.037-.052.128-.086.192-.018.217.156.599.082.678-.192a6.03 6.03 0 00.092-.833c-.177.055-.309.092-.321.165l-.037.238c-.015.077-.168.08-.174-.018-.067-.305-.345-.345-.513.128-.113.092-.317.11-.339-.027.027-.317-.101-.36-.357-.211-.082-.629-.165-1.23-.247-1.859.107-.003.205.076.302-.046-.107-.333-.333-1.013-.458-1.062-.061-.074-.113-.028-.192-.009-.134.043-.259.159-.22.384.159.965.263 1.7.421 2.665.024.113-.07.262-.192.247-.207-.14-.259-.424-.613-.412-.257.003-.55.281-.586.55-.043.213-.058.445 0 .632.18.216.397.195.586.146.155-.064.284-.22.338-.183.037.045.009.558-.732.952-.449.201-.806.247-.998-.119-.119-.229.009-1.099-.284-.897-.867 2.235 2.03 2.545 2.354.092.031-.101.153-.202.174-.037-.067 2.222-2.241 2.375-2.61 1.676-.092-.165-.119-.531-.128-.751-.055-.437-.284-.269-.32.164-.037.241-.027.309-.027.54.115 1.755 2.915 1.001 3.369-.449zm-1.08-1.518c-.018.034-.097.02-.155.02-.066-.003-.097-.014-.137-.067-.018-.06.038-.117.063-.162.031-.053.198-.108.257.04a.168.168 0 01-.028.169z"}),a.createElement("path",{d:"M13.602 13.009c.174-.064.999-1.007.999-1.007-.043-.037-.081-.064-.124-.101-.046-.04-.041-.08 0-.119.204-.119.139-.38.032-.499a.495.495 0 00-.444.004c-.143.137-.177.357-.064.495.11.052.22.163.147.224-.337.36-1.261.981-1.154 1.003.023.03.59.029.608 0zm.611-1.481c.053-.013.121.034.153.104.032.07.015.137-.037.15h-.002c-.052.013-.12-.034-.152-.104-.031-.071-.014-.137.038-.15zm-5.351 5.73c-.136.277-.193.087-.205-.068a3.553 3.553 0 01.039-.779c.034-.22 0-.153-.07-.064-.309.492-.336 1.228-.165 1.447.09.104.239.15.35.116.194-.084.279-.478.233-.621-.066-.101-.117-.117-.182-.031zm10.181-5.208c.356.478.694.965 1.025 1.461.065.43.112.85.14 1.267.055.804.071 1.674.021 2.521.15.006.393-.244.477-.609.055-.505-.02-1.404-.025-1.702a22.071 22.071 0 00-.027-.56c.394.644.778 1.318 1.153 2.067.137-.064.107-.83.027-.938-.3-.643-.713-1.279-.845-1.523-.049-.09-.216-.346-.415-.639a7.506 7.506 0 00-.084-.698c-.062-.428.177.047.144-.202-.077-.428-.315-.717-.593-1.109-.09-.127-.087-.153-.226.031a.772.772 0 00-.066.351 2.458 2.458 0 00-.139-.185 51.319 51.319 0 00-.455-.388c-.101-.072-.347-.202-.391.014a1.25 1.25 0 00.022.454c.026.107.181.285.257.387zm.74-.024c.019.083.039.166.052.251l.015.081a3.628 3.628 0 00-.131-.172c-.164-.194-.028-.152.064-.16z"}),a.createElement("path",{d:"M21.919 16.693c-.348.363-.85.81-1.396 1.017-.059.066.146.349.41.349.443-.052.833-.301 1.194-.956.097-.152.267-.479.271-.733.033-1.486-.074-2.643-.297-3.717a.6.6 0 01.012-.259c.028-.034.126 0 .178-.084.075-.078-.201-.718-.359-.964-.056-.11-.075-.184-.168.013-.098.16-.163.439-.155.699.211 1.463.276 2.744.414 4.207.011.141-.01.347-.104.428zm5.83-3.71c-.015-.104-.061-.346-.043-.377.028-.074.173.008.225-.077.076-.077-.374-.655-.531-.901-.057-.11-.076-.184-.169.013-.098.16-.132.447-.093.699.235 1.589.41 2.783.446 4.192-.021.134-.025.206-.088.374-.139.178-.292.4-.437.508-.144.107-.451.21-.552.289-.317.185-.318.396-.06.403.442-.052.966-.088 1.327-.634.097-.152.212-.565.217-.819.033-1.486-.019-2.596-.242-3.67zm-3.351 1.237c.004-.204.023-.474.034-.643.005-.063.02-.134.08-.15.061-.016.169.062.17-.004-.012-.129-.038-.321-.111-.412-.1-.148-.365-.112-.412.12.001.086.04.132.033.21-.012.044-.058.074-.167.022.018-.016-.071-.139-.071-.139-.085-.052-.199.003-.272.05a.415.415 0 00-.024.33c.12.227.539.612.74.616z"}),a.createElement("path",{d:"M24.257 12.481c.293.359.592.723.893 1.093.065.826.082 1.502.146 2.328-.009.35-.117.655-.22.699 0 0-.155.09-.259-.009-.076-.031-.379-.505-.379-.505-.155-.142-.257-.102-.367 0-.304.293-.441.843-.647 1.221-.054.085-.204.157-.371-.006-.423-.579-.175-1.402-.227-1.19-.377.425-.211 1.128-.126 1.28.124.248.225.408.467.531.22.162.392.06.486-.053.222-.231.225-.816.329-.934.072-.213.257-.177.346-.082a.876.876 0 00.315.273c.207.183.454.216.697.049.166-.093.275-.214.372-.453.108-.288.049-1.612.027-2.406.155.2.306.409.459.618.067.663.105 1.323.083 1.997-.016.135.47-.4.466-.654-.002-.205 0-.391 0-.566.234.352.462.715.676 1.099.134-.07.09-.825.005-.929-.247-.414-.576-.845-.803-1.153-.015-.039-.023-.083-.041-.12-.091-.211-.034-.381-.077-.605-.042-.225-.031-.561-.096-.828-.018-.104-.072-.438-.056-.469.026-.075.126.002.175-.084.073-.08-.253-.925-.419-1.167-.06-.108-.168-.071-.302.105-.123.116-.077.38-.03.631.117.608.215 1.191.299 1.768a57.866 57.866 0 00-.545-.713l-.008-.044c0-.011-.027-.524-.051-.646-.004-.049-.016-.064.036-.058.055.046.062.049.097.065.056.01.105-.085.072-.172l-.517-.952c-.041-.041-.095-.085-.16.011a.374.374 0 00-.128.283c.016.225.055.455.07.681l.022.122c-.023-.027-.051-.061-.063-.073-.439-.462.202-.075-.084-.432-.242-.266-.312-.349-.52-.509-.104-.067-.167-.195-.201.023a4.553 4.553 0 00-.015.575c0 .092.093.26.174.36zm-8.901 1.079c.252.104.413-.376.517-.902.07-.148.124-.164.16-.088-.009.7.05.855.23 1.068.401.31.733.039.76.013l.312-.312c.069-.073.162-.078.26-.013.096.086.083.236.287.34.172.069.54.016.625-.132.115-.196.143-.264.195-.338.082-.109.222-.06.222-.026-.013.061-.095.122-.039.231.098.073.12.026.178.01.204-.098.356-.54.356-.54.009-.165-.083-.151-.143-.117-.078.047-.083.063-.161.111-.1.015-.293.081-.388-.067-.098-.178-.1-.426-.174-.605 0-.013-.13-.283-.009-.3.061.011.19.045.211-.063.063-.106-.137-.408-.273-.561-.119-.13-.284-.146-.443-.013-.112.103-.096.217-.118.326a.508.508 0 00.105.443c.111.219.314.502.247.898 0 0-.118.188-.325.164-.086-.019-.226-.056-.3-.606-.056-.417.014-1-.163-1.273-.064-.165-.11-.324-.266-.042-.042.111-.222.279-.091.626.107.219.15.576.102.974-.074.113-.09.151-.187.264-.136.146-.283.109-.396.054-.106-.071-.188-.108-.236-.334.009-.36.029-.95-.037-1.075-.097-.194-.257-.124-.326-.065-.329.301-.491.808-.59 1.211-.091.294-.188.21-.256.091-.166-.156-.177-1.373-.378-1.172-.323.914.182 1.918.532 1.82z"}),a.createElement("path",{d:"M20.137 15.524l-.096-.055-1.881-.009c-.097-.037-.068-.069 0-.095.449-.061 1.248-.191 1.301-.958-.009-.399-.172-.661-.662-.733-.359.028-.616.377-.575.76-.017.104.034.306-.071.329-.691.063-1.444.495-1.469.805-.042.029-.136-.055-.124-.187a3.694 3.694 0 00-.475-1.606c-.218-.218-.15-.146-.296-.043-.094.108-.111.182-.106.397 0 .008.176.499.325.843.099.353.192.756.125 1.137-.232.504-.699.956-1.149 1.201-.232.075-.431.048-.48-.004-.143-.096-.136-.273-.125-.276.379-.265.813-.478 1.153-1.191.1-.272.13-.437.031-.858a.814.814 0 00-.197-.398c.061-.04.236.093.263.014a1.253 1.253 0 00-.331-.61c-.135-.123-.282-.137-.406-.024-.14.078-.17.356-.103.6.074.184.275.215.419.584 0 .008.052.276-.022.381-.059.184-.824.785-.866.812-.021.026-.012-.013-.015-.113-.005-.122.049-.41.034-.412-.249.161-.332.654-.377.8-.63.435-1.343.759-1.755 1.201-.215.335 1.478-.385 1.675-.472.044.032.039.183.157.318.176.238.548.385.913.294.61-.221.963-.637 1.321-1.098.051-.075.131-.132.205-.075.246.551.957.941 1.874.982.213-.259.11-.384.024-.438 0-.008-.453-.18-.522-.352-.042-.156.06-.293.264-.397.589-.071 1.168-.15 1.729-.33.006-.188.115-.47.19-.592.072-.124.111-.087.1-.132zm-1.547-1.172c.028-.047.121-.045.208.006.087.05.136.13.107.177-.028.048-.122.045-.209-.006-.087-.05-.134-.129-.106-.177zm-.757 1.9c-.202.069-.396.123-.396.415.075.406-.103.267-.208.211-.124-.089-.473-.304-.523-.768-.008-.111.079-.204.218-.204.209.057.518.061.786.089.219.014.328.186.123.257zm-6.967-4.505c.216.104.624.06.606-.29 0-.031-.008-.135-.011-.163-.044-.103-.164-.078-.192.029-.009.035.015.091-.016.109-.018.018-.087.007-.084-.089 0-.031-.023-.064-.036-.083-.014-.009-.022-.012-.047-.012-.03.001-.03.009-.046.035-.007.025-.017.051-.017.08-.004.034-.017.046-.042.052-.028 0-.022.003-.044-.012-.014-.015-.031-.021-.031-.046a.276.276 0 00-.014-.086c-.012-.016-.031-.023-.053-.029-.118 0-.126.135-.119.187-.011.009-.015.251.146.318z"}),a.createElement("path",{d:"M17.512 14.027c0-.031-.023-.063-.036-.083-.014-.009-.022-.012-.047-.012-.03.001-.029.009-.046.035-.007.026-.017.051-.017.08-.003.035-.017.047-.042.052-.028 0-.022.003-.045-.011-.014-.015-.031-.021-.031-.046a.271.271 0 00-.014-.086c-.012-.016-.031-.023-.053-.028-.118 0-.126.135-.12.186-.009.01-.014.251.147.319.217.103.732.043.606-.29a2.88 2.88 0 00-.011-.164c-.044-.103-.165-.077-.192.029-.008.035.016.091-.016.109-.016.018-.086.007-.083-.09zm3.397-.707c.216.104.623.06.605-.289a2.88 2.88 0 00-.011-.164c-.044-.103-.164-.077-.191.029-.009.035.015.091-.017.109-.018.018-.087.008-.084-.089 0-.031-.023-.064-.036-.083-.014-.009-.022-.012-.048-.012-.03.002-.029.009-.046.035-.007.026-.017.051-.017.08-.004.035-.017.047-.042.052-.028 0-.022.003-.045-.011-.014-.015-.03-.021-.03-.046a.283.283 0 00-.014-.087c-.013-.016-.031-.023-.054-.028-.118 0-.126.135-.119.186-.007.01-.012.251.149.318zm.146-1.352c.077.216-.059.422.022.452.073.034.177-.223.215-.46.045-.192-.092-.585-.286-.666-.118-.028-.286.042-.232.2-.027.076.238.334.281.474zm1.995 5.064c.151.001.325-.345.399-.688.041-.472-.028-.759-.04-1.037-.013-.277-.313-2.392-.375-2.602-.073-.397.293-.053.253-.284-.127-.291-.442-.714-.542-.967-.06-.108-.034-.204-.168-.028-.123.405-.166.735-.119.987.318 1.66.644 3.04.592 4.619zm3.756-4.34c.035.108-.053.457.02.489.067.036.161-.241.196-.498.019-.141-.084-.633-.261-.721-.108-.03-.261.045-.211.217-.025.083.217.361.256.513zm-13.119 3.656c.065.027.154-.177.188-.366.019-.104-.081-.465-.25-.53-.104-.022-.246.006-.202.16-.005.083.23.183.244.376.034.08-.05.337.02.36zm-4.556-4.615c.033.083-.033.348.036.373.063.028.152-.184.185-.379.019-.108.004-.474-.246-.549-.103-.023-.246.034-.199.165-.024.062.187.274.224.39zm4.902 1.173c-.191.104-.266.412-.146.591.111.159.287.1.311.1.188.023.299-.352.299-.352s.006-.105-.217.094c-.094.018-.106-.017-.129-.071a.456.456 0 01.029-.292c.032-.093-.04-.134-.147-.07zm1.442-1.153a.257.257 0 00.118-.174c.029-.146-.155.069-.178-.094-.041-.151.077-.213.189-.359.004-.101.002-.172-.135-.09-.096.065-.288.263-.294.491-.006.129-.03.128.055.21.061.089.122.08.245.016zm1.299.078c.124-.336.124-.478.133-.621-.038-.217-.185-.21-.282.031-.042.091-.091.57-.083.57-.033.143.149.204.232.02zm8.17 2.383s-1.003.713-1.027.738c-.1.088-.05.4 0 .364.071.028 1.08-.657 1.06-.737.047.002.07-.401-.033-.365zm-.123 1.934c.067.036.244-.183.237-.456.02-.141-.051-.658-.227-.746-.108-.03-.252.062-.202.233-.025.082.124.369.163.521.035.109-.044.416.029.448zm-5.68 1.496c0 .009.085.082.185.024.21-.081.342-.159.636-.224.077-.001.072-.208-.05-.215-.159.008-.307.016-.466.142-.098.022-.114-.037-.136-.091-.024-.133.055-.225.038-.324.006.006-.091-.083-.19-.033-.005 0-.221.146-.29.248-.043.033-.038.061-.025.116.033.076.092.053.158.017.088-.012.13.046.123.151-.042.133.017.182.017.189zm6.551.166c-.033.057-.055.143.047.17.188.053.621-.229.621-.234.07-.053.047-.152.041-.152-.041-.047-.133-.02-.195-.027-.029 0-.127-.015-.08-.101a.598.598 0 00.078-.151c.029-.065.004-.108-.102-.143-.107-.02-.15-.01-.269 0-.064.014-.086.042-.098.12.005.118.076.112.15.159.043.055.071.105-.003.194-.07.065-.119.101-.19.165zM25.5 23H24v-.5a.5.5 0 00-1 0v.5H11s0 1 3 1h9v.5a.5.5 0 001 0V24h1v.5a.5.5 0 001 0v-1a.5.5 0 00-.5-.5z"})))}},342:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#006A4D",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("circle",{fill:"#F42A41",cx:16,cy:17.5,r:7}))}},343:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#138808",d:"M0 27a4 4 0 004 4h28a4 4 0 004-4v-4H0v4z"}),a.createElement("path",{fill:"#EEE",d:"M0 13h36v10H0z"}),a.createElement("path",{fill:"#F93",d:"M36 13V9a4 4 0 00-4-4H4a4 4 0 00-4 4v4h36z"}),a.createElement("circle",{fill:"navy",cx:18,cy:18,r:4}),a.createElement("circle",{fill:"#EEE",cx:18,cy:18,r:3}),a.createElement("path",{fill:"#6666B3",d:"M18 15l.146 2.264 1.001-2.035-.73 2.147 1.704-1.498-1.497 1.705 2.147-.731-2.035 1.002L21 18l-2.264.146 2.035 1.001-2.147-.73 1.497 1.704-1.704-1.497.73 2.147-1.001-2.035L18 21l-.146-2.264-1.002 2.035.731-2.147-1.705 1.497 1.498-1.704-2.147.73 2.035-1.001L15 18l2.264-.146-2.035-1.002 2.147.731-1.498-1.705 1.705 1.498-.731-2.147 1.002 2.035z"}),a.createElement("circle",{fill:"navy",cx:18,cy:18,r:1}))}},344:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#D7141A",d:"M1.383 29.973A3.795 3.795 0 004 31h28c2.209 0 4-1.791 4-4.5V18H17.5L1.383 29.973z"}),a.createElement("path",{fill:"#EEE",d:"M32 5H4a3.98 3.98 0 00-2.646 1.006L17.5 18H36V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#11457E",d:"M1.383 29.973L17.5 18 1.354 6.006A3.985 3.985 0 000 9v17.5c0 1.48.537 2.683 1.383 3.473z"}))}},345:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#C60C30",d:"M32 5H15v11h21V9a4 4 0 00-4-4zM15 31h17c2.209 0 4-1.791 4-4.5V20H15v11zM0 20v6.5C0 29.209 1.791 31 4 31h7V20H0zM11 5H4a4 4 0 00-4 4v7h11V5z"}),a.createElement("path",{fill:"#EEE",d:"M15 5h-4v11H0v4h11v11h4V20h21v-4H15z"}))}},346:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EEE",d:"M0 13h36v10H0z"}),a.createElement("path",{fill:"#ED2939",d:"M32 5H4a4 4 0 00-4 4v4h36V9a4 4 0 00-4-4zM4 31h28a4 4 0 004-4v-4H0v4a4 4 0 004 4z"}))}},347:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#D32D27",d:"M31 27a4 4 0 01-4 4H9a4 4 0 01-4-4V9a4 4 0 014-4h18a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#FFF",d:"M25 16.063h-5v-5h-4v5h-5V20h5v5.063h4V20h5z"}))}},348:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#FFCD05",d:"M0 27a4 4 0 004 4h28a4 4 0 004-4v-4H0v4z"}),a.createElement("path",{fill:"#ED1F24",d:"M0 14h36v9H0z"}),a.createElement("path",{fill:"#141414",d:"M32 5H4a4 4 0 00-4 4v5h36V9a4 4 0 00-4-4z"}))}},349:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#0D5EB0",d:"M4 31h28a3.98 3.98 0 001.935-.5H2.065A3.98 3.98 0 004 31z"}),a.createElement("path",{fill:"#EEE",d:"M8.5 19.5H0V22h36v-2.5H14zM0 27c0 .17.014.336.035.5h35.931c.02-.164.034-.33.034-.5v-2H0v2zm14-13h22v2.5H14zm0-5.5V11h22V9c0-.17-.014-.336-.035-.5H14z"}),a.createElement("path",{fill:"#0D5EB0",d:"M14 11h22v3H14zM0 22h36v3H0zm2.065 8.5h31.87a4.002 4.002 0 002.031-3H.035a3.998 3.998 0 002.03 3zM0 14h5.5v5.5H0zm14 2.5V14H8.5v5.5H36v-3zm19.935-11A3.98 3.98 0 0032 5H4A4.002 4.002 0 00.034 8.5C.014 8.664 0 8.83 0 9v2h5.5V5.5h3V11H14V8.5h21.965a3.998 3.998 0 00-2.03-3z"}),a.createElement("path",{fill:"#EEE",d:"M8.5 11V5h-3v6H0v3h5.5v5.5h3V14H14v-3z"}))}},350:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#00247D",d:"M32 5H4c-.205 0-.407.015-.604.045l-.004 1.754-2.73-.004A3.984 3.984 0 000 9v18a4 4 0 004 4h28a4 4 0 004-4V9a4 4 0 00-4-4z"}),a.createElement("path",{d:"M9 26.023l-1.222 1.129.121-1.66-1.645-.251 1.373-.94-.829-1.443 1.591.488L9 21.797l.612 1.549 1.591-.488-.83 1.443 1.374.94-1.645.251.121 1.66zM27.95 9.562l-.799.738.079-1.086-1.077-.164.899-.615-.542-.944 1.04.319.4-1.013.401 1.013 1.041-.319-.543.944.898.615-1.076.164.079 1.086zm-4 6l-.799.739.079-1.086-1.077-.164.899-.616-.542-.944 1.04.319.4-1.013.401 1.013 1.041-.319-.543.944.898.616-1.076.164.079 1.086zm9-2l-.799.739.079-1.086-1.077-.164.899-.616-.542-.944 1.04.319.4-1.013.401 1.013 1.041-.319-.543.944.898.616-1.076.164.079 1.086zm-5 14l-.799.739.079-1.086-1.077-.164.899-.616-.542-.944 1.04.319.4-1.013.401 1.013 1.041-.319-.543.944.898.616-1.076.164.079 1.086zM31 16l.294.596.657.095-.475.463.112.655L31 17.5l-.588.309.112-.655-.475-.463.657-.095z",fill:"#FFF"}),a.createElement("path",{fill:"#00247D",d:"M19 18V5H4c-.32 0-.604.045-.604.045l-.004 1.754-2.73-.004S.62 6.854.535 7A3.988 3.988 0 000 9v9h19z"}),a.createElement("path",{fill:"#EEE",d:"M19 5h-2.331L12 8.269V5H7v2.569L3.396 5.045a3.942 3.942 0 00-1.672.665L6.426 9H4.69L.967 6.391a4.15 4.15 0 00-.305.404L3.813 9H0v5h3.885L0 16.766V18h3.332L7 15.432V18h5v-3.269L16.668 18H19v-2.029L16.185 14H19V9h-2.814L19 7.029V5z"}),a.createElement("path",{fill:"#CF1B2B",d:"M11 5H8v5H0v3h8v5h3v-5h8v-3h-8z"}),a.createElement("path",{fill:"#CF1B2B",d:"M19 5h-1.461L12 8.879V9h1.571L19 5.198zm-17.276.71a4.052 4.052 0 00-.757.681L4.69 9h1.735L1.724 5.71zM6.437 14L.734 18h1.727L7 14.822V14zM19 17.802v-1.22L15.313 14H13.57z"}))}},351:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#D52B1E",d:"M4 5a4 4 0 00-4 4v18a4 4 0 004 4h6V5H4zm28 0h-6v26h6a4 4 0 004-4V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#EEE",d:"M10 5h16v26H10z"}),a.createElement("path",{fill:"#D52B1E",d:"M18.615 22.113c1.198.139 2.272.264 3.469.401l-.305-1.002a.46.46 0 01.159-.476l3.479-2.834-.72-.339c-.317-.113-.23-.292-.115-.722l.531-1.936-2.021.427c-.197.03-.328-.095-.358-.215l-.261-.911-1.598 1.794c-.227.288-.687.288-.544-.376l.683-3.634-.917.475c-.257.144-.514.168-.657-.089l-1.265-2.366v.059-.059l-1.265 2.366c-.144.257-.401.233-.658.089l-.916-.475.683 3.634c.144.664-.317.664-.544.376l-1.598-1.793-.26.911c-.03.12-.162.245-.359.215l-2.021-.427.531 1.936c.113.43.201.609-.116.722l-.72.339 3.479 2.834c.138.107.208.3.158.476l-.305 1.002 3.47-.401c.106 0 .176.059.175.181l-.214 3.704h.956l-.213-3.704c.002-.123.071-.182.177-.182z"}))}},352:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#00247D",d:"M0 9.059V13h5.628zM4.664 31H13v-5.837zM23 25.164V31h8.335zM0 23v3.941L5.63 23zM31.337 5H23v5.837zM36 26.942V23h-5.631zM36 13V9.059L30.371 13zM13 5H4.664L13 10.837z"}),a.createElement("path",{fill:"#CF1B2B",d:"M25.14 23l9.712 6.801a3.977 3.977 0 00.99-1.749L28.627 23H25.14zM13 23h-2.141l-9.711 6.8c.521.53 1.189.909 1.938 1.085L13 23.943V23zm10-10h2.141l9.711-6.8a3.988 3.988 0 00-1.937-1.085L23 12.057V13zm-12.141 0L1.148 6.2a3.994 3.994 0 00-.991 1.749L7.372 13h3.487z"}),a.createElement("path",{fill:"#EEE",d:"M36 21H21v10h2v-5.836L31.335 31H32a3.99 3.99 0 002.852-1.199L25.14 23h3.487l7.215 5.052c.093-.337.158-.686.158-1.052v-.058L30.369 23H36v-2zM0 21v2h5.63L0 26.941V27c0 1.091.439 2.078 1.148 2.8l9.711-6.8H13v.943l-9.914 6.941c.294.07.598.116.914.116h.664L13 25.163V31h2V21H0zM36 9a3.983 3.983 0 00-1.148-2.8L25.141 13H23v-.943l9.915-6.942A4.001 4.001 0 0032 5h-.663L23 10.837V5h-2v10h15v-2h-5.629L36 9.059V9zM13 5v5.837L4.664 5H4a3.985 3.985 0 00-2.852 1.2l9.711 6.8H7.372L.157 7.949A3.968 3.968 0 000 9v.059L5.628 13H0v2h15V5h-2z"}),a.createElement("path",{fill:"#CF1B2B",d:"M21 15V5h-6v10H0v6h15v10h6V21h15v-6z"}))}},353:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#169B62",d:"M4 5a4 4 0 00-4 4v18a4 4 0 004 4h8V5H4z"}),a.createElement("path",{fill:"#EEE",d:"M12 5h12v26H12z"}),a.createElement("path",{fill:"#FF883E",d:"M32 5h-8v26h8a4 4 0 004-4V9a4 4 0 00-4-4z"}))}},354:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EEE",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{d:"M34.363 28.125c-1.817 0-1.817-1.062-3.636-1.062-1.818 0-1.818 1-3.693 1-1.762 0-1.762-1-3.608-1-1.789 0-1.789 1-3.607 1-1.818 0-1.818-1-3.637-1-1.818 0-1.818 1-3.636 1s-1.818-1-3.636-1-1.818 1-3.636 1-1.818-1-3.637-1c-.762 0-1.201.178-1.591.383.071.638.277 1.233.613 1.744.263-.077.575-.127.979-.127 1.818 0 1.818 1 3.637 1 1.818 0 1.818-1 3.636-1s1.818 1 3.636 1 1.818-1 3.636-1 1.818 1 3.637 1c1.818 0 1.818-1 3.629-1 1.825 0 1.825 1 3.64 1 1.822 0 1.822-1 3.639-1 1.82 0 1.82.969 3.638.969.088 0 .157-.01.236-.015a3.97 3.97 0 001.326-2.283c-.386.21-.821.391-1.565.391zM36 25.383v-1.944c-.402.228-.846.43-1.637.43-1.817 0-1.817-1.062-3.636-1.062-1.818 0-1.818 1-3.693 1-1.762 0-1.762-1-3.608-1-1.789 0-1.789 1-3.607 1-1.818 0-1.818-1-3.637-1-1.818 0-1.818 1-3.636 1s-1.818-1-3.636-1-1.818 1-3.636 1-1.818-1-3.637-1c-.791 0-1.234.19-1.636.404v2c.402-.214.846-.404 1.636-.404 1.818 0 1.818 1 3.637 1 1.818 0 1.818-1 3.636-1s1.818 1 3.636 1 1.818-1 3.636-1 1.818 1 3.637 1c1.818 0 1.818-1 3.629-1 1.825 0 1.825 1 3.64 1 1.822 0 1.822-1 3.639-1 1.82 0 1.82.969 3.638.969.789-.002 1.233-.186 1.635-.393zm0-4.257v-1.944c-.402.228-.846.43-1.637.43-1.817 0-1.817-1.063-3.636-1.063-1.818 0-1.818 1-3.693 1-1.762 0-1.762-1-3.608-1-1.789 0-1.789 1-3.607 1-1.818 0-1.818-1-3.637-1-1.818 0-1.818 1-3.636 1s-1.818-1-3.636-1-1.818 1-3.636 1-1.818-1-3.637-1c-.791 0-1.234.191-1.636.404v2c.402-.214.846-.404 1.636-.404 1.818 0 1.818 1 3.637 1 1.818 0 1.818-1 3.636-1s1.818 1 3.636 1 1.818-1 3.636-1 1.818 1 3.637 1c1.818 0 1.818-1 3.629-1 1.825 0 1.825 1 3.64 1 1.822 0 1.822-1 3.639-1 1.82 0 1.82.969 3.638.969.789 0 1.233-.185 1.635-.392zm0-4.257v-1.944c-.402.228-.846.43-1.637.43-1.817 0-1.817-1.062-3.636-1.062-1.818 0-1.818 1-3.693 1-1.762 0-1.762-1-3.608-1-1.789 0-1.789 1-3.607 1-1.818 0-1.818-1-3.637-1-1.818 0-1.818 1-3.636 1s-1.818-1-3.636-1-1.818 1-3.636 1-1.818-1-3.637-1c-.791 0-1.234.19-1.636.404v2c.402-.214.846-.404 1.636-.404 1.818 0 1.818 1 3.637 1 1.818 0 1.818-1 3.636-1s1.818 1 3.636 1 1.818-1 3.636-1 1.818 1 3.637 1c1.818 0 1.818-1 3.629-1 1.825 0 1.825 1 3.64 1 1.822 0 1.822-1 3.639-1 1.82 0 1.82.969 3.638.969.789-.002 1.233-.186 1.635-.393zm0-4.258v-1.944c-.402.227-.846.43-1.637.43-1.817 0-1.817-1.062-3.636-1.062-1.818 0-1.818 1-3.693 1-1.762 0-1.762-1-3.608-1-1.789 0-1.789 1-3.607 1-1.818 0-1.818-1-3.637-1-1.818 0-1.818 1-3.636 1s-1.818-1-3.636-1-1.818 1-3.636 1-1.818-1-3.637-1c-.791 0-1.234.19-1.636.404v2c.402-.214.846-.404 1.636-.404 1.818 0 1.818 1 3.637 1 1.818 0 1.818-1 3.636-1s1.818 1 3.636 1 1.818-1 3.636-1 1.818 1 3.637 1c1.818 0 1.818-1 3.629-1 1.825 0 1.825 1 3.64 1 1.822 0 1.822-1 3.639-1 1.82 0 1.82.969 3.638.969.789-.001 1.233-.186 1.635-.393zm-.062-4.227a3.955 3.955 0 00-.656-1.663 3.314 3.314 0 01-.919.119c-1.817 0-1.817-1.062-3.636-1.062-1.818 0-1.818 1-3.693 1-1.762 0-1.762-1-3.608-1-1.789 0-1.789 1-3.607 1-1.818 0-1.818-1-3.637-1-1.818 0-1.818 1-3.636 1s-1.818-1-3.636-1-1.818 1-3.636 1c-1.814 0-1.82-.994-3.625-.999A3.978 3.978 0 00.101 8.133c.377-.193.808-.356 1.535-.356 1.818 0 1.818 1 3.637 1 1.818 0 1.818-1 3.636-1s1.818 1 3.636 1 1.818-1 3.636-1 1.818 1 3.637 1c1.818 0 1.818-1 3.629-1 1.825 0 1.825 1 3.64 1 1.822 0 1.822-1 3.639-1 1.82 0 1.82.969 3.638.969.751 0 1.187-.168 1.574-.362z",fill:"#00247D"}),a.createElement("path",{fill:"#C1694F",d:"M27.248 28.677a.324.324 0 01-.646 0V12.815c0-.178.146-.323.324-.323.179 0 .322.145.322.323v15.862z"}),a.createElement("path",{fill:"#DD2E44",d:"M24.656 20.364s.139-.334.627-.334c.49 0 .607.255.901.372.294.118.666.177.666.177v2.447h-2.624s-.099-.92-.255-1.37c-.157-.449-.294-1.058.039-1.254.334-.194.646-.038.646-.038z"}),a.createElement("path",{fill:"#FFCC4D",d:"M26.84 19.728v.352s-.675-.059-1.263-.47c-.358-.25-1.116-.559-1.703-.058-.382.322-.353 1.146-.116 1.468.233.323.469 1.058-.031.559-.499-.5-.647-1.264-.499-1.763.147-.499.47-.998 1.233-.998.765 0 1.264.411 1.616.617.306.177.794.233.763.293z"}),a.createElement("path",{fill:"#FFCC4D",d:"M23.895 21.499l.41-.019-.117.626s.411-.312.431-.235c.018.08.078.646.078.646l-.53-.117.313.451-.41.194s-.157-.528-.196-.781c-.04-.255.021-.765.021-.765zm.86.334l.391-.039s-.338-.764.157-.745c.549.021.176.726.176.726h.412l.059.567-.391-.235v.334l.43.411-1.136.116.293-.489-.018-.351-.274.313-.099-.608z"}),a.createElement("path",{fill:"#DD2E44",d:"M29.205 20.364s-.138-.334-.627-.334-.606.255-.9.372c-.294.118-.666.177-.666.177v2.447h2.625s.097-.92.254-1.37c.157-.449.293-1.058-.039-1.254-.334-.194-.647-.038-.647-.038z"}),a.createElement("path",{fill:"#FFCC4D",d:"M27.021 19.728v.352s.676-.059 1.263-.47c.358-.25 1.116-.559 1.704-.058.382.322.351 1.146.116 1.468-.234.323-.468 1.058.03.559.499-.5.647-1.264.499-1.763-.146-.499-.47-.998-1.233-.998-.765 0-1.264.411-1.615.617-.305.177-.793.233-.764.293z"}),a.createElement("path",{fill:"#FFCC4D",d:"M29.969 21.499l-.411-.019.117.626s-.411-.312-.431-.235c-.019.08-.078.646-.078.646l.527-.117-.313.451.411.194s.157-.528.197-.781c.038-.255-.019-.765-.019-.765zm-.863.334l-.392-.039s.339-.764-.157-.745c-.547.021-.175.726-.175.726h-.411l-.061.567.393-.235v.334l-.431.411 1.137.116-.295-.489.021-.351.274.313.097-.608zm-1.495-3.095c0 .39-.308.704-.685.704a.695.695 0 01-.686-.704c0-.389.307-.705.686-.705a.696.696 0 01.685.705zm-1.301-1.546h1.232v.49H26.31z"}),a.createElement("path",{fill:"#FFCC4D",d:"M26.633 16.859h.586v4.523h-.586z"}),a.createElement("path",{fill:"#FFCC4D",d:"M26.44 21.187h.919l-.255.646.588-.313v.86l-.569-.195.49.744h-1.272l.391-.744-.567.136v-.763l.529.254z"}),a.createElement("path",{fill:"#FFCC4D",d:"M26.928 22.635c1.215 0 1.978.1 2.84.411 0 0 .06.511-.059.765-.116.255-2.8-.177-2.8-.177l.019-.999z"}),a.createElement("path",{fill:"#FFCC4D",d:"M26.963 22.635c-1.214 0-1.978.1-2.838.411 0 0-.06.511.057.765.118.255 2.8-.177 2.8-.177l-.019-.999z"}),a.createElement("path",{fill:"#EEE",d:"M30.078 24.33c0 .384-1.412.693-3.152.693-1.74 0-3.153-.309-3.153-.693 0-.385 1.413-.696 3.153-.696s3.152.311 3.152.696z"}),a.createElement("path",{fill:"#99AAB5",d:"M29.043 24.583c0 .212-.948.384-2.117.384-1.17 0-2.119-.172-2.119-.384 0-.21.949-.382 2.119-.382 1.169 0 2.117.172 2.117.382z"}),a.createElement("path",{fill:"#77B255",d:"M25.655 6.873l.646.803s.451-.274.471-.215c.02.059-.039.666-.039.666l.313.078-.255.803s.393-.215.372-.137c-.019.078-.117.764-.117.764l.157.098-.02.764s.157.273.157.215c0-.058.156-.998.156-.998l.216.176.076-.489.177-.842.196.313.411-1.391.216.49.489-.568.333-.02.489-.137.099.293h.45s-.234.196-.215.254c.018.059.43.274.371.294-.059.02-1.058-.079-1.058-.079l-.566.568.352.118-.53.313.451.137-.411.313.353-.039-.568.431.568.118-.764.391.176.196-.763.451-.099.313.725-.568s.588-.392.881-.568c.294-.176.529-.509 1.02-.646s1.429.02 1.429.02l-.882.47.177.274-.567.176.078.332-.941.138.02.352-.803.138-.098.333-.548.196.255.215s-.471.157-.411.176c.059.02.685.078.685.078s-.314.274-.256.274c.06 0 .842.039.842.039l-.333.235.785.039-.354.274s.646.059.646.118c0 .058-.273.352-.273.352l.567.059s-.273.293-.216.314c.061.019.804.528.804.528l-.882-.117s-.215.293-.235.234c-.018-.058-.233-.411-.233-.411l-.216.235-.234-.47s-.274.156-.256.098c.02-.059-.313-.431-.313-.431l-.078.177-.215-.529-.195.274-.373-.51-.137.215-.51-.45s-.019.294 0 .353c.02.059.373.313.373.313s-.235.098-.235.156c0 .059.471.431.471.431l-.216.157.509.431s-.47.098-.412.137c.06.039.294.352.294.352l-.195.47-.391-.607-.216.059-.04-.509-.214-.02.116-.567-.234.039-.02-.47-.099-.47-.195-.314s-.137.235-.118.293c.02.059.178.431.178.431s-.216.117-.178.176c.04.059.255.489.255.489s-.47.098-.411.098c.06 0 .216.274.216.274l-.255.098-.117.294s-.293-.333-.274-.274c.02.059-.176.607-.176.607l-.293-.333.293-1.155-.354-.098-.254.529s-.215-.254-.235-.196c-.02.059-.235.451-.235.451s-.252-.431-.233-.372c.019.058-.295.686-.295.686s-.274-.549-.274-.47c0 .078-.195.764-.195.764s-.312-.529-.294-.431c.021.098-.215.549-.215.549l-.06-.49-.43.254.489-.705.823-.764.627-.469-.414-.058s.597-.207.665-.215c.178-.02-.272-.176-.272-.176l1.096-.333s-.489-.255-.548-.196c-.059.059-.647.176-.647.176l-.078-.45-.606.254s-.099-.412-.118-.353c-.019.059-.49.313-.49.313l-.233-.254-.275.431-.314-.235-.566.176.273-.411-.313-.176.646-.411.137-.274.882.059s-.236-.314-.196-.255c.04.059.9.196.9.196l.256-.039.861.313-.705-.568-.607-.118.392-.313-.921-.332.197-.313-1.216-.313.746-.196-.51-.862 1.057.627.47-.157.236.607.431.255.077.45.216-.098.195.528.256-.079.136.373.374.019-.1-.49.156-.235-.431-.353.374-.176-.55-.451.47-.059-.666-.646.53.02-.53-.607.432-.098-.081-.782z"}),a.createElement("path",{fill:"#00247D",d:"M19 18V5H4c-.32 0-.604.045-.604.045l-.004 1.754-2.73-.004S.62 6.854.535 7A3.988 3.988 0 000 9v9h19z"}),a.createElement("path",{fill:"#EEE",d:"M19 5h-2.331L12 8.269V5H7v2.569L3.396 5.045a3.942 3.942 0 00-1.672.665L6.426 9H4.69L.967 6.391a4.15 4.15 0 00-.305.404L3.813 9H0v5h3.885L0 16.766V18h3.332L7 15.432V18h5v-3.269L16.668 18H19v-2.029L16.185 14H19V9h-2.814L19 7.029V5z"}),a.createElement("path",{fill:"#CF1B2B",d:"M11 5H8v5H0v3h8v5h3v-5h8v-3h-8z"}),a.createElement("path",{fill:"#CF1B2B",d:"M19 5h-1.461L12 8.879V9h1.571L19 5.198zm-17.276.71a4.052 4.052 0 00-.757.681L4.69 9h1.735L1.724 5.71zM6.437 14L.734 18h1.727L7 14.822V14zM19 17.802v-1.22L15.313 14H13.57z"}))}},355:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#00247D",d:"M32 5H4c-.205 0-.407.015-.604.045l-.004 1.754-2.73-.004A3.984 3.984 0 000 9v18a4 4 0 004 4h28a4 4 0 004-4V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#EEEDED",d:"M29.194 9.5h-1.263l-.194-.58-.237-.706-.237.706-.194.58h-1.263l.535.443.472.39-.199.587-.267.782.656-.504.497-.383.497.383.656.504-.267-.782-.199-.587.472-.39z"}),a.createElement("path",{fill:"#CF1B2B",d:"M27.5 9l-.251.75H26.5l.605.501-.255.749.65-.5.65.5-.255-.749.605-.501h-.749z"}),a.createElement("path",{fill:"#EEEDED",d:"M29.194 25.75h-1.263l-.194-.58-.237-.706-.237.706-.194.58h-1.263l.535.443.472.39-.199.587-.267.782.656-.504.497-.383.497.383.656.504-.267-.782-.199-.587.472-.39z"}),a.createElement("path",{fill:"#CF1B2B",d:"M27.5 25.25l-.251.75H26.5l.605.501-.255.749.65-.5.65.5-.255-.749L28.5 26h-.749z"}),a.createElement("path",{fill:"#EEEDED",d:"M33.194 13.5h-1.263l-.194-.58-.237-.706-.237.706-.194.58h-1.263l.535.443.472.39-.199.587-.267.782.656-.504.497-.383.497.383.656.504-.267-.782-.199-.587.472-.39z"}),a.createElement("path",{fill:"#CF1B2B",d:"M31.5 13l-.251.75H30.5l.605.501-.255.749.65-.5.65.5-.255-.749.605-.501h-.749z"}),a.createElement("path",{fill:"#EEEDED",d:"M25.194 15.5h-1.263l-.194-.58-.237-.706-.237.706-.194.58h-1.263l.535.443.472.39-.199.587-.267.782.656-.504.497-.383.497.383.656.504-.267-.782-.199-.587.472-.39z"}),a.createElement("path",{fill:"#CF1B2B",d:"M23.5 15l-.251.75H22.5l.605.501-.255.749.65-.5.65.5-.255-.749.605-.501h-.749z"}),a.createElement("path",{fill:"#00247D",d:"M19 18V5H4c-.32 0-.604.045-.604.045l-.004 1.754-2.73-.004S.62 6.854.535 7A3.988 3.988 0 000 9v9h19z"}),a.createElement("path",{fill:"#EEE",d:"M19 5h-2.331L12 8.269V5H7v2.569L3.396 5.045a3.942 3.942 0 00-1.672.665L6.426 9H4.69L.967 6.391a4.15 4.15 0 00-.305.404L3.813 9H0v5h3.885L0 16.766V18h3.332L7 15.432V18h5v-3.269L16.668 18H19v-2.029L16.185 14H19V9h-2.814L19 7.029V5z"}),a.createElement("path",{fill:"#CF1B2B",d:"M11 5H8v5H0v3h8v5h3v-5h8v-3h-8z"}),a.createElement("path",{fill:"#CF1B2B",d:"M19 5h-1.461L12 8.879V9h1.571L19 5.198zm-17.276.71a4.052 4.052 0 00-.757.681L4.69 9h1.735L1.724 5.71zM6.437 14L.734 18h1.727L7 14.822V14zM19 17.802v-1.22L15.313 14H13.57z"}))}},356:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#B22334",d:"M35.445 7C34.752 5.809 33.477 5 32 5H18v2h17.445zM0 25h36v2H0zm18-8h18v2H18zm0-4h18v2H18zM0 21h36v2H0zm4 10h28c1.477 0 2.752-.809 3.445-2H.555c.693 1.191 1.968 2 3.445 2zM18 9h18v2H18z"}),a.createElement("path",{fill:"#EEE",d:"M.068 27.679c.017.093.036.186.059.277.026.101.058.198.092.296.089.259.197.509.333.743L.555 29h34.89l.002-.004a4.22 4.22 0 00.332-.741 3.75 3.75 0 00.152-.576c.041-.22.069-.446.069-.679H0c0 .233.028.458.068.679zM0 23h36v2H0zm0-4v2h36v-2H18zm18-4h18v2H18zm0-4h18v2H18zM0 9zm.555-2l-.003.005L.555 7zM.128 8.044c.025-.102.06-.199.092-.297a3.78 3.78 0 00-.092.297zM18 9h18c0-.233-.028-.459-.069-.68a3.606 3.606 0 00-.153-.576A4.21 4.21 0 0035.445 7H18v2z"}),a.createElement("path",{fill:"#3C3B6E",d:"M18 5H4a4 4 0 00-4 4v10h18V5z"}),a.createElement("path",{fill:"#FFF",d:"M2.001 7.726l.618.449-.236.725L3 8.452l.618.448-.236-.725L4 7.726h-.764L3 7l-.235.726zm2 2l.618.449-.236.725.617-.448.618.448-.236-.725L6 9.726h-.764L5 9l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L9 9l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L13 9l-.235.726zm-8 4l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L5 13l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L9 13l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L13 13l-.235.726zm-6-6l.618.449-.236.725L7 8.452l.618.448-.236-.725L8 7.726h-.764L7 7l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L11 7l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L15 7l-.235.726zm-12 4l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L3 11l-.235.726zM6.383 12.9L7 12.452l.618.448-.236-.725.618-.449h-.764L7 11l-.235.726h-.764l.618.449zm3.618-1.174l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L11 11l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L15 11l-.235.726zm-12 4l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L3 15l-.235.726zM6.383 16.9L7 16.452l.618.448-.236-.725.618-.449h-.764L7 15l-.235.726h-.764l.618.449zm3.618-1.174l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L11 15l-.235.726zm4 0l.618.449-.236.725.617-.448.618.448-.236-.725.618-.449h-.764L15 15l-.235.726z"}))}},357:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#DE3830",d:"M32 5H6.5L19 13.5h17V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#002395",d:"M6.5 31H32a4 4 0 004-4v-4.5H19L6.5 31z"}),a.createElement("path",{fill:"#141414",d:"M0 11v14l10.5-7z"}),a.createElement("path",{fill:"#FFB611",d:"M0 9v2l10.5 7L0 25v2l13.5-9z"}),a.createElement("path",{fill:"#007A4D",d:"M3.541 5.028A4 4 0 000 9l13.5 9L0 27a4 4 0 003.541 3.972L18.5 20.5H36v-5H18.5L3.541 5.028z"}),a.createElement("path",{fill:"#EEE",d:"M6.5 5H4c-.156 0-.308.011-.459.028L18.5 15.5H36v-2H19L6.5 5zM3.541 30.972c.151.017.303.028.459.028h2.5L19 22.5h17v-2H18.5L3.541 30.972z"}))}},358:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#75AADB",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#EEE",d:"M0 13h36v10H0z"}),a.createElement("path",{fill:"#FCBF49",d:"M18 13l.488 2.548 1.426-2.167-.525 2.54 2.146-1.457-1.457 2.147 2.541-.524-2.167 1.425L23 18l-2.548.488 2.167 1.426-2.541-.525 1.457 2.146-2.146-1.457.525 2.541-1.426-2.167L18 23l-.488-2.548-1.425 2.167.524-2.541-2.147 1.457 1.457-2.146-2.54.525 2.167-1.426L13 18l2.548-.488-2.167-1.425 2.54.524-1.457-2.147 2.147 1.457-.524-2.54 1.425 2.167z"}),a.createElement("path",{fill:"#843511",d:"M18 14.33l.242 1.265.116.605.339-.514.708-1.076-.261 1.261-.125.604.51-.346 1.066-.723-.723 1.066-.346.51.603-.125 1.262-.26-1.076.708-.515.337.605.116L21.67 18l-1.265.242-.605.116.514.339 1.076.708-1.262-.261-.604-.125.346.51.723 1.065-1.065-.723-.51-.346.125.604.261 1.262-.708-1.076-.338-.515-.116.605L18 21.67l-.242-1.265-.116-.605-.339.515-.708 1.076.26-1.262.125-.603-.51.346-1.066.723.723-1.066.346-.51-.604.125-1.261.261 1.076-.708.514-.339-.605-.116L14.33 18l1.265-.242.605-.116-.515-.339-1.076-.708 1.261.26.603.125-.346-.51-.724-1.066 1.066.724.51.346-.125-.603-.26-1.261.708 1.076.339.515.116-.605L18 14.33M18 13l-.488 2.548-1.425-2.167.524 2.541-2.147-1.457 1.457 2.147-2.54-.524 2.167 1.425L13 18l2.548.488-2.167 1.426 2.54-.525-1.457 2.146 2.147-1.457-.524 2.541 1.425-2.167L18 23l.488-2.548 1.426 2.167-.525-2.541 2.146 1.457-1.457-2.146 2.541.525-2.167-1.426L23 18l-2.548-.488 2.167-1.425-2.541.524 1.457-2.147-2.146 1.457.525-2.541-1.426 2.167L18 13zm1.914.381h.005-.005zm1.621 1.083h.005-.005zm1.084 1.623h.005-.005z"}),a.createElement("circle",{fill:"#FCBF49",cx:18,cy:18,r:2}),a.createElement("path",{fill:"#843511",d:"M18 20.125c-1.172 0-2.125-.953-2.125-2.125s.953-2.125 2.125-2.125 2.125.953 2.125 2.125-.953 2.125-2.125 2.125zm0-4c-1.034 0-1.875.841-1.875 1.875s.841 1.875 1.875 1.875 1.875-.841 1.875-1.875-.841-1.875-1.875-1.875z"}),a.createElement("path",{fill:"#C16540",d:"M17.801 17.774c0 .155-.261.28-.583.28-.323 0-.584-.125-.584-.28 0-.155.261-.28.584-.28.322 0 .583.125.583.28zm1.553-.024c0-.161-.266-.292-.594-.292-.328 0-.594.13-.594.292s.266.292.594.292c.329 0 .594-.131.594-.292z"}),a.createElement("path",{fill:"#ED8662",d:"M17.463 18.874c0-.126.246-.229.548-.229.303 0 .548.102.548.229 0 .126-.246.229-.548.229-.303 0-.548-.103-.548-.229z"}))}},359:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#1F429B",d:"M13 5H4a4 4 0 00-4 4v9h13V5zm-4.663 9.292l-1.882-1.367-1.882 1.367.719-2.212-1.882-1.368h2.326L6.455 8.5l.719 2.212H9.5L7.618 12.08l.719 2.212z"}),a.createElement("path",{fill:"#EEE",d:"M32 5H13v13h23V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#D42D27",d:"M0 18v9a4 4 0 004 4h28a4 4 0 004-4v-9H0z"}),a.createElement("path",{fill:"#FFF",d:"M7.174 10.712L6.455 8.5l-.719 2.212H3.41l1.882 1.368-.719 2.212 1.882-1.367 1.882 1.367-.719-2.212L9.5 10.712z"}))}},360:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#FBD116",d:"M32 5H4a4 4 0 00-4 4v9h36V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#22408C",d:"M0 18h36v7H0z"}),a.createElement("path",{fill:"#CE2028",d:"M0 27a4 4 0 004 4h28a4 4 0 004-4v-2H0v2z"}))}},361:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#C60A1D",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#FFC400",d:"M0 12h36v12H0z"}),a.createElement("path",{fill:"#EA596E",d:"M9 17v3a3 3 0 106 0v-3H9z"}),a.createElement("path",{fill:"#F4A2B2",d:"M12 16h3v3h-3z"}),a.createElement("path",{fill:"#DD2E44",d:"M9 16h3v3H9z"}),a.createElement("ellipse",{fill:"#EA596E",cx:12,cy:14.5,rx:3,ry:1.5}),a.createElement("ellipse",{fill:"#FFAC33",cx:12,cy:13.75,rx:3,ry:.75}),a.createElement("path",{fill:"#99AAB5",d:"M7 16h1v7H7zm9 0h1v7h-1z"}),a.createElement("path",{fill:"#66757F",d:"M6 22h3v1H6zm9 0h3v1h-3zm-8-7h1v1H7zm9 0h1v1h-1z"}))}},362:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#006847",d:"M4 5a4 4 0 00-4 4v18a4 4 0 004 4h7V5H4z"}),a.createElement("path",{fill:"#CE1126",d:"M32 5h-7v26h7a4 4 0 004-4V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#EEE",d:"M11 5h14v26H11z"}),a.createElement("path",{fill:"#A6D388",d:"M23 18a5 5 0 11-10 0h-1a6 6 0 0012 0h-1z"}),a.createElement("path",{d:"M13.543 20.269a.498.498 0 00-.673-.218.5.5 0 00-.219.673c.09.177.189.35.296.516v.001l.004.006v.001l.008.011v.001l.003.006.001.002.004.005v.001l.003.005v.002l.003.005.001.002.003.005.001.002.003.004.002.003.002.003.001.003.003.005.001.001.002.003.003.006.001.002.003.005.001.002.007.01v.001l.005.007v.001c.052.077.105.151.161.226a.497.497 0 00.697.101.499.499 0 00.103-.699 5.96 5.96 0 01-.43-.71zm-.497-1.582a5.282 5.282 0 01-.046-.833.5.5 0 00-.485-.514l-.036.001a.5.5 0 00-.478.485 8.061 8.061 0 00-.001.311v.09l.001.005v.028l.001.003-.001.002v.003l.001.002v.029l.001.003v.011l.001.019.001.009v.011c.009.16.025.319.046.477a.5.5 0 00.562.425.503.503 0 00.433-.567zm5.294 4.3l-.006.001-.124.008a5.087 5.087 0 01-.71-.021.5.5 0 00-.1.995l.125.011.004.001.002-.001.003.001h.002l.006.001h.006l.003.001h.001l.006-.001.003.001h.005l.006.001.005.001h.013l.006.001h.013c.152.01.305.015.459.012h.039l.007-.001.006.001h.015l.005-.001h.019l.006-.001h.001l.005.001.001-.001.006.001h.001l.005-.001h.008l.006-.001h.006l.001.001.006-.001h.007l.005-.001h.02l.005-.001h.004l.004-.001.004.001h.005l.004-.001h.005c.042-.001.085-.005.127-.007a.494.494 0 00.453-.526.493.493 0 00-.514-.473zm-2.439-.448a5.07 5.07 0 01-.724-.411.495.495 0 00-.303-.087.5.5 0 00-.263.911l.001.001.006.003.006.006.006.004.006.005c.266.181.548.34.842.476a.498.498 0 00.663-.243.498.498 0 00-.24-.665zm5.03-.398a.498.498 0 00-.248.08 5.142 5.142 0 01-.734.387.498.498 0 00.213.96.528.528 0 00.173-.038l.134-.06h.002l.006-.004.002-.001.004-.002h.004l.004-.002.002-.002.006-.001.002-.002.003-.002.005-.002.003-.001.005-.002.002-.001.005-.002.002-.001c.003-.002.003-.003.005-.003l.002-.001.006-.003h.002l.006-.003.006-.003.002-.001.005-.003.002-.001.006-.003.001-.001.007-.001.007-.004.002-.001.004-.003h.002l.006-.004.008-.002.006-.004h.001l.007-.004.001-.001.014-.006.007-.003.014-.008.008-.003.006-.003h.001l.014-.008v-.001l.006-.002h.001l.022-.012.007-.002.014-.008.007-.004h.001c.001-.001.003-.002.007-.002.002-.003.004-.004.006-.005l.008-.004.006-.003v-.001l.014-.006h.001l.007-.004.001-.001.005-.003h.001l.007-.004.006-.003h.002l.006-.004v-.001l.007-.003.001-.001.006-.003v-.001l.006-.002.002-.001.004-.003.003-.001.005-.003.002-.001.005-.003.002-.001.006-.002c-.001-.001 0-.001.001-.001l.006-.003.002-.001.004-.003.002-.001.006-.003.002-.001c0-.002.002-.002.004-.003l.003-.001.004-.002.003-.002.004-.002.003-.002.003-.002.003-.003.005-.001.004-.001.002-.002.004-.002.004-.003.002-.001.004-.002.004-.003.003-.002c.002.001.003 0 .005-.001l.002-.002.004-.002.003-.002.003-.002.004-.002.004-.003.002-.001c.002-.001.006-.001.008-.003-.002-.001-.002-.001 0-.001l.004-.002.007-.005.002-.001.007-.003v-.001l.012-.006.008-.005a.095.095 0 01.02-.011h.001c.063-.038.128-.077.19-.117a.5.5 0 00.152-.69.554.554 0 00-.457-.225zm2.571-4.618l-.024.001a.5.5 0 00-.479.498c0 .277-.025.557-.072.829a.5.5 0 00.987.168v-.005l.001-.002.001-.002-.001-.002.001-.002v-.002l.001-.002v-.003l.001-.002v-.009c.002-.001.002-.003.002-.004v-.006a6.23 6.23 0 00.052-.391l-.001-.001.001-.003v-.001l.001-.004v-.011l.002-.003v-.001l-.001-.003v-.002l.001-.003v-.004l.002-.001-.002-.003v-.004c.002-.001.002-.002.002-.003v-.019l.002-.003v-.001a6.22 6.22 0 00.021-.495.5.5 0 00-.498-.499zm-.443 2.696a.5.5 0 00-.68.196 4.853 4.853 0 01-.463.692.5.5 0 00.783.622c.116-.146.227-.299.33-.455.002-.007.007-.014.011-.02l.001-.001.004-.006v-.001l.004-.007c.002-.002.004-.004.004-.006l.001.001.004-.006v-.001a.01.01 0 00.003-.007l.002-.001.004-.006v-.001c.002-.001.002-.003.003-.005l.001-.001.004-.006.001-.002.002-.005.003-.002.002-.005h.002l.002-.006.001-.002.004-.004.001-.002c.001-.002.001-.004.003-.005l.001-.003.004-.003c0-.001 0-.002.002-.003v-.004l.003-.002.003-.005.001-.002.003-.006.002-.002.002-.004.002-.003c0-.001 0-.002.002-.003 0-.001 0-.002.002-.003l.003-.005.001-.003.002-.003.002-.003c.002-.001.002-.002.002-.003.002-.001.002-.002.002-.004l.002-.003.003-.004.003-.004v-.003l.002-.003.003-.004.003-.003v-.003l.004-.005v-.003c.002-.001.003-.002.003-.004l.002-.002.002-.003.003-.005.002-.003v-.002l.004-.005c0-.001 0-.002.002-.003l.001-.003.003-.004.002-.004.002-.003c.001-.001 0-.003.002-.004 0-.001 0-.002.002-.002l.002-.005.002-.002.002-.006.002-.001.002-.004.002-.002.002-.005.002-.002.002-.006c.002-.001 0-.002 0-.002l.004-.005.001-.002.004-.005v-.001l.003-.006.002-.002.002-.006v-.001l.005-.005.003-.006v-.001l.004-.007.002-.001.025-.047a.498.498 0 00-.199-.672z",fill:"#5C913B"}),a.createElement("ellipse",{fill:"#55ACEE",cx:18,cy:21,rx:3,ry:1}),a.createElement("ellipse",{fill:"#FFCC4D",cx:18.5,cy:21,rx:1.5,ry:1}),a.createElement("path",{fill:"#5C913B",d:"M19.117 21.274a.503.503 0 01-.44-.739c.16-.294.328-.561.502-.795a10 10 0 01-.43.009c-.276 0-.528-.225-.528-.501s.195-.5.472-.5l.082.001c.296 0 .6-.018.872-.043a.49.49 0 01.41.156c.014-.011.028-.022.043-.031.1-.066.193-.119.28-.161a.49.49 0 01.211-.094l.036-.007c.188-.061.32-.069.373-.069a.498.498 0 01.477.647c-.082.266-.265.326-.586.39a1.2 1.2 0 00-.238.128.507.507 0 01-.599-.034.499.499 0 01-.002.614c-.17.217-.337.475-.496.768a.498.498 0 01-.439.261zm-1.42-1.589a.497.497 0 01-.066-.004 6.98 6.98 0 01-1.056-.221.5.5 0 01-.337-.622l.006-.02-.012.023a.5.5 0 01-.681.192 4.126 4.126 0 01-.907-.681.5.5 0 01.707-.707c.197.197.428.37.688.515a.5.5 0 01.229.597.5.5 0 01.59-.256c.276.082.579.145.9.188a.5.5 0 01-.061.996zm-2.452-2.339c-.426 0-.977-.165-1.311-.559-.512-.604-.813-1.379-.767-1.973.012-.159-.143-.287-.295-.327-.087-.023-.24-.037-.312.118a.25.25 0 01-.454-.21c.156-.339.506-.49.892-.392.358.093.701.415.667.85-.036.462.226 1.109.65 1.61.223.264.611.371.875.381.215.011.324-.038.347-.059-.056-.133-.797-.523-1.113-.689-.269-.141-.349-.335-.369-.472-.067-.455.4-.916.852-1.36.159-.157.31-.305.392-.414.093-.123.078-.205.06-.256-.069-.187-.368-.372-.728-.452-.333-.074-.558-.235-.668-.479-.145-.321-.068-.741.234-1.285a.25.25 0 11.437.243c-.285.512-.257.744-.215.837.042.092.149.157.32.195.423.094.932.345 1.088.767.089.241.044.501-.128.73-.104.139-.268.3-.441.471-.258.254-.739.727-.708.931.006.042.061.079.107.102.751.394 1.25.679 1.352 1.028a.456.456 0 01-.042.359c-.097.169-.299.273-.585.299-.043.004-.09.006-.137.006z"}),a.createElement("ellipse",{fill:"#FFCC4D",cx:19.5,cy:18,rx:.5,ry:1}),a.createElement("path",{fill:"#FFCC4D",d:"M17.292 17.188c0 .288-.345.521-.771.521-.425 0-.771-.233-.771-.521s.345-.521.771-.521c.425 0 .771.233.771.521zm-1.187-4.627c.05.212-.227.46-.619.553-.392.093-.75-.004-.801-.216-.05-.213.227-.461.618-.554.393-.092.752.004.802.217z"}),a.createElement("path",{fill:"#C1694F",d:"M22.533 17.955c.09.07.243-.729.22-.978 0-.017-.029-.546.083-.924.069-.128.073-1.083-.033-1.334.084-.007.185-.034.197-.136-.388.143-.479-.817-.852-1.369-.362-.553-.811-.875-1.28-1.211a.979.979 0 01.162-.27c-.575.288-1.471-.755-2.795-.677-.297.029-.438.047-.514.229-.247.02-.498.076-.498.401 0 .078.071.22.229.221.216.063.392.014.539.316l.039.312s-.193-.247-.299-.286l.065-.133c-.1-.058-.277-.011-.277-.011s-.385-.18-.694-.132l-.06-.25c-.054.154-.175.146-.192.291-.034-.104-.079-.233-.111-.337-.109.148-.077.308-.116.462-.042.036-.128.037-.15-.062-.011-.122-.026-.133-.026-.278-.078.137-.172.204-.203.439l-.083-.26c.003.307-.261.49-.511.707-.071.13.011.131.017.198l.132.066.237-.017c.039.049.007.053.11.084.276.077.62-.254.89.267-.124.104-.249.347-.209.393.05 0-.1.07.102.006-.21.204-.352.473-.352.489-.024.058.084-.008.062.097l.05-.006c-.479.518-.016 1.075-.067 1.374.08.129.09-.003.19-.016.084.368.326.591.474.882l-.312.003c.007.138.132.269.231.39l-.209.066a1.128 1.128 0 00-.352.274c-.069.168.333.208.527.238l-.007.203c.303.029.653-.061.653-.078l.076-.059.171.094c.057 0 .146-.228.105-.403.11.131.214.342.324.474l.103-.014c.094.149.223.297.317.446l.105.04c.061-.021.113-.028.146-.148l.048.084.166-.114.116-.023.087.142c.051-.019.101-.13.104-.248.052.103.066.095.104.122l.077-.162.415.388.314.018c.112.076.419.124.471.001.252.108.549-.014.534-.134.232.092.589.03.589.015.043-.005.153-.113.049-.194-.767-.534-1.904-1.418-2.343-1.631 0-.158-.119-.727-.247-.883l.104-.174c.299.279.407.252.566.296.17.135.229.34.399.527l.152.028a2.583 2.583 0 00-.554-.873c.164.082.436.301.618.46.12.201.155.361.265.613.08.051.162.238.151.083-.019-.291-.224-.752-.224-.785.326.258.322.66.421.905.083.124.125.29.161.251l-.096-.756-.056-.277c.241.139.327.669.44 1.305 0 .101.041.212.035.277.052.064.111.241.11.136 0 0 0-1.034-.071-1.271-.018-.127.03-.333.03-.333.088.429.182.894.271 1.322v.315l.132.133c.025-.26.055-.518.081-.776l-.099-.925v-.264c-.002-.093.085-.076.14.03.013.227.013.404.022.63.039.258.066.447.085.776.011.266.023.904.079.893z"}))}},363:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EDECEC",d:"M32 5H18v10h18V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#EEE",d:"M11 5H4a4 4 0 00-4 4v6h11V5z"}),a.createElement("path",{fill:"#EDECEC",d:"M32 31H18V21h18v6a4 4 0 01-4 4zm-21 0H4a4 4 0 01-4-4v-6h11v10z"}),a.createElement("path",{fill:"#003580",d:"M18 5h-7v10H0v6h11v10h7V21h18v-6H18z"}))}},364:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#141414",d:"M4 5a4 4 0 00-4 4v18a4 4 0 004 4h8V5H4z"}),a.createElement("path",{fill:"#FEE833",d:"M12 5h12v26H12z"}),a.createElement("path",{fill:"#EE232C",d:"M32 5h-8v26h8a4 4 0 004-4V9a4 4 0 00-4-4z"}))}},365:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#ED2939",d:"M36 27a4 4 0 01-4 4h-8V5h8a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#002495",d:"M4 5a4 4 0 00-4 4v18a4 4 0 004 4h8V5H4z"}),a.createElement("path",{fill:"#EEE",d:"M12 5h12v26H12z"}))}},366:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EDECEC",d:"M20.666 19l-.467.809h.934zM18 21.618l.467-.809h-.934z"}),a.createElement("path",{fill:"#EEE",d:"M0 25h36V11H0v14zM.294 7.5h35.413A4 4 0 0032 5H4A3.999 3.999 0 00.294 7.5z"}),a.createElement("path",{fill:"#EDECEC",d:"M21.133 16.191h-.934l.467.809zm-5.332 0h-.934l.467.809zm3.243 3.618L20.089 18l-1.045-1.809h-2.088L15.911 18l1.045 1.809zM15.334 19l-.467.809h.934zM18 14.382l-.467.809h.934z"}),a.createElement("path",{fill:"#0038B8",d:"M.294 7.5A3.982 3.982 0 000 9v2h36V9c0-.531-.106-1.036-.294-1.5H.294z"}),a.createElement("path",{fill:"#EEE",d:"M.294 28.5h35.413A4 4 0 0132 31H4a3.999 3.999 0 01-3.706-2.5z"}),a.createElement("path",{fill:"#0038B8",d:"M.294 28.5A3.982 3.982 0 010 27v-2h36v2c0 .531-.106 1.036-.294 1.5H.294zm16.084-7.691L18 23.618l1.622-2.809h3.243L21.244 18l1.622-2.809h-3.243L18 12.382l-1.622 2.809h-3.243L14.756 18l-1.622 2.809h3.244zm1.622.809l-.467-.809h.934l-.467.809zm3.133-5.427l-.467.809-.467-.808h.934zM20.666 19l.467.808h-.934l.467-.808zM18 14.382l.467.809h-.934l.467-.809zm-1.044 1.809h2.089L20.089 18l-1.044 1.809h-2.089L15.911 18l1.045-1.809zm-1.155 0l-.467.809-.467-.808h.934zM15.334 19l.467.808h-.934l.467-.808z"}))}},367:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EEE",d:"M0 14h36v8H0z"}),a.createElement("path",{fill:"#CD2A3E",d:"M32 5H4a4 4 0 00-4 4v5h36V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#436F4D",d:"M4 31h28a4 4 0 004-4v-5H0v5a4 4 0 004 4z"}))}},368:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#DC1F26",d:"M32 5H4a4 4 0 00-4 4v9h36V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#EEE",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4v-9h36v9z"}))}},369:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#CE2B37",d:"M36 27a4 4 0 01-4 4h-8V5h8a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#009246",d:"M4 5a4 4 0 00-4 4v18a4 4 0 004 4h8V5H4z"}),a.createElement("path",{fill:"#EEE",d:"M12 5h12v26H12z"}))}},370:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EEE",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("circle",{fill:"#ED1B2F",cx:18,cy:18,r:7}))}},371:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EEE",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#C60C30",d:"M21.441 13.085a6 6 0 00-8.356 1.474A3.001 3.001 0 0018 18a3 3 0 014.915 3.442 6 6 0 00-1.474-8.357z"}),a.createElement("path",{fill:"#003478",d:"M22.178 17.264A3 3 0 0018 18a3.001 3.001 0 01-4.915-3.442 6 6 0 109.829 6.882 2.997 2.997 0 00-.736-4.176z"}),a.createElement("path",{d:"M24.334 25.572l1.928-2.298.766.643-1.928 2.298zm2.57-3.063l1.928-2.297.766.643-1.928 2.297zm-1.038 4.351l1.928-2.297.766.643-1.928 2.297zm2.572-3.066l1.93-2.297.766.644-1.93 2.296zm-1.041 4.352l1.93-2.297.765.643-1.929 2.297zm2.571-3.065l1.927-2.3.767.643-1.927 2.3zm.004-14.162l.766-.643 1.93 2.299-.767.643zM27.4 7.853l.766-.643 1.928 2.299-.767.642zm-1.533 1.288l.766-.643 4.5 5.362-.766.643zm-1.532 1.284l.767-.643 1.927 2.298-.766.642zm2.57 3.065l.766-.643 1.93 2.297-.765.643zM6.4 20.854l.766-.643 4.499 5.363-.767.643zM4.87 22.14l.765-.642 1.929 2.298-.767.643zm2.567 3.066l.766-.643 1.93 2.297-.766.643zm-4.101-1.781l.766-.643 4.5 5.362-.767.643zm-.001-10.852l4.498-5.362.767.642-4.5 5.363zm1.532 1.287l4.5-5.363.766.643-4.5 5.362zM6.4 15.145l4.5-5.363.766.643-4.5 5.363z",fill:"#292F33"}))}},372:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EEE",d:"M0 14h36v8H0z"}),a.createElement("path",{fill:"#AE1F28",d:"M32 5H4a4 4 0 00-4 4v5h36V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#20478B",d:"M4 31h28a4 4 0 004-4v-5H0v5a4 4 0 004 4z"}))}},373:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EF2B2D",d:"M10 5H4a4 4 0 00-4 4v6h10V5zm22 0H16v10h20V9a4 4 0 00-4-4zM10 31H4a4 4 0 01-4-4v-6h10v10zm22 0H16V21h20v6a4 4 0 01-4 4z"}),a.createElement("path",{fill:"#002868",d:"M14.5 5h-2.944l-.025 11.5H0v3h11.525L11.5 31h3V19.5H36v-3H14.5z"}),a.createElement("path",{fill:"#EEE",d:"M14.5 31H16V21h20v-1.5H14.5zM16 5h-1.5v11.5H36V15H16zm-4.5 0H10v10H0v1.5h11.5zM0 19.5V21h10v10h1.5V19.5z"}))}},374:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EEE",d:"M32 5H4a4 4 0 00-4 4v9h36V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#DC143C",d:"M0 27a4 4 0 004 4h28a4 4 0 004-4v-9H0v9z"}))}},375:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#009B3A",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#FEDF01",d:"M32.728 18L18 29.124 3.272 18 18 6.875z"}),a.createElement("circle",{fill:"#002776",cx:17.976,cy:17.924,r:6.458}),a.createElement("path",{fill:"#CBE9D4",d:"M12.277 14.887a6.406 6.406 0 00-.672 2.023c3.995-.29 9.417 1.891 11.744 4.595.402-.604.7-1.28.883-2.004-2.872-2.808-7.917-4.63-11.955-4.614z"}),a.createElement("path",{fill:"#88C9F9",d:"M12 18.233h1v1h-1zm1 2h1v1h-1z"}),a.createElement("path",{fill:"#55ACEE",d:"M15 18.233h1v1h-1zm2 1h1v1h-1zm4 2h1v1h-1zm-3 1h1v1h-1zm3-6h1v1h-1z"}),a.createElement("path",{fill:"#3B88C3",d:"M19 20.233h1v1h-1z"}))}},376:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#039",d:"M32 5H4a4 4 0 00-4 4v18a4 4 0 004 4h28a4 4 0 004-4V9a4 4 0 00-4-4z"}),a.createElement("path",{d:"M18.539 9.705l.849-.617h-1.049l-.325-.998-.324.998h-1.049l.849.617-.325.998.849-.617.849.617zm0 17.333l.849-.617h-1.049l-.325-.998-.324.998h-1.049l.849.617-.325.998.849-.617.849.617zm-8.666-8.667l.849-.617h-1.05l-.324-.998-.325.998H7.974l.849.617-.324.998.849-.617.849.617zm1.107-4.285l.849-.617h-1.05l-.324-.998-.324.998h-1.05l.849.617-.324.998.849-.617.849.617zm0 8.619l.849-.617h-1.05l-.324-.998-.324.998h-1.05l.849.617-.324.998.849-.617.849.617zm3.226-11.839l.849-.617h-1.05l-.324-.998-.324.998h-1.05l.849.617-.324.998.849-.617.849.617zm0 15.067l.849-.617h-1.05l-.324-.998-.324.998h-1.05l.849.617-.324.998.849-.616.849.616zm11.921-7.562l-.849-.617h1.05l.324-.998.325.998h1.049l-.849.617.324.998-.849-.617-.849.617zm-1.107-4.285l-.849-.617h1.05l.324-.998.324.998h1.05l-.849.617.324.998-.849-.617-.849.617zm0 8.619l-.849-.617h1.05l.324-.998.324.998h1.05l-.849.617.324.998-.849-.617-.849.617zm-3.226-11.839l-.849-.617h1.05l.324-.998.324.998h1.05l-.849.617.324.998-.849-.617-.849.617zm0 15.067l-.849-.617h1.05l.324-.998.324.998h1.05l-.849.617.324.998-.849-.616-.849.616z",fill:"#FC0"}))}},377:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#002B7F",d:"M4 5a4 4 0 00-4 4v18a4 4 0 004 4h8V5H4z"}),a.createElement("path",{fill:"#FCD116",d:"M12 5h12v26H12z"}),a.createElement("path",{fill:"#CE1126",d:"M32 5h-8v26h8a4 4 0 004-4V9a4 4 0 00-4-4z"}))}},378:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#CE2028",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4v-4h36v4z"}),a.createElement("path",{fill:"#22408C",d:"M0 13h36v10H0z"}),a.createElement("path",{fill:"#EEE",d:"M32 5H4a4 4 0 00-4 4v4h36V9a4 4 0 00-4-4z"}))}},379:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#EE2024",d:"M36 27v-4H0v4a4 4 0 004 4h28a4 4 0 004-4z"}),a.createElement("path",{fill:"#EEE",d:"M36 23H0V9a4 4 0 014-4h28a4 4 0 014 4v14z"}),a.createElement("path",{fill:"#0A4EA2",d:"M0 13h36v10H0z"}),a.createElement("path",{fill:"#FFF",d:"M11.837 25.09c-1.129-.646-3.638-2.278-4.555-4.488-.925-2.227-.719-5.423-.481-9.124l.06-.936h11.963l.061.936c.238 3.7.444 6.895-.481 9.123-.918 2.211-3.426 3.844-4.556 4.489l-1.004.572-1.007-.572z"}),a.createElement("path",{fill:"#EE2024",d:"M17.886 11.542H7.798c-.238 3.707-.422 6.68.407 8.676 1.021 2.46 4.516 4.22 4.631 4.276v.006l.005-.003.005.003v-.006c.115-.057 3.61-1.816 4.632-4.276.83-1.996.647-4.97.408-8.676z"}),a.createElement("path",{fill:"#FFF",d:"M15.865 16.109s-1.401.133-2.632.165a13.05 13.05 0 01.003-1.286c.973.06 1.645.246 1.645.246.247 0 .447-.2.447-.447v-.606c0-.247-.2-.447-.447-.447 0 0-.739.126-1.568.179.071-.782.156-1.435.156-1.435 0-.247-.2-.447-.447-.447h-.605c-.247 0-.447.2-.447.447 0 0 .092.666.17 1.443a13.359 13.359 0 01-1.583-.187c-.247 0-.447.2-.447.447v.606c0 .247.2.447.447.447 0 0 .639-.206 1.67-.255.014.23.024.453.024.646 0 .161-.006.388-.016.649-1.242-.033-2.693-.164-2.693-.164-.247 0-.447.2-.447.447v.606c0 .247.2.447.447.447 0 0 1.319-.108 2.635-.128-.083 1.531-.207 3.322-.207 3.322 0 .247.2.447.447.447h.605c.247 0 .447-.2.447-.447 0 0-.111-1.773-.185-3.317 1.272.03 2.581.123 2.581.123.247 0 .447-.2.447-.447v-.606c0-.247-.2-.448-.447-.448z"}),a.createElement("path",{fill:"#0A4EA2",d:"M17.079 20.965c-.508-1.086-1.905-1.393-2.568-.066-.438-1.594-1.681-1.594-1.681-1.594s-1.244 0-1.681 1.594c-.658-1.316-2.04-1.024-2.558.041 1.314 2.074 4.143 3.504 4.247 3.555v.005l.005-.003.005.003v-.006c.103-.051 2.91-1.469 4.231-3.529z"}))}},380:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#006AA7",d:"M15.5 31H32c2.209 0 4-1.791 4-4.5v-6H15.5V31zM32 5H15.5v10.5H36V9a4 4 0 00-4-4zM10.5 5H4a4 4 0 00-4 3.997V15.5h10.5V5zM0 20.5v6.004C.002 29.211 1.792 31 4 31h6.5V20.5H0z"}),a.createElement("path",{fill:"#FECC00",d:"M15.5 5h-5v10.5H0v5h10.5V31h5V20.5H36v-5H15.5z"}))}},381:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#FFB700",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#8D2129",d:"M32 6H10v24h22c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3z"}),a.createElement("path",{fill:"#005641",d:"M4 6C2.346 6 1 7.346 1 9v18c0 1.654 1.346 3 3 3h1V6H4z"}),a.createElement("path",{fill:"#FF5B00",d:"M5 6h4v24H5z"}),a.createElement("path",{d:"M13.199 10.062s-.067-.959-.035-1.762c.021-.532-.277-1.175-.84-1.082s-1.188-.021-1.188-.021.125.364 0 .708-.125 1.062.719 1.156c.844.095 1.188.532 1.344 1.001zm18.684 0s.067-.959.035-1.762c-.021-.532.277-1.175.84-1.082s1.188-.021 1.188-.021-.125.364 0 .708.125 1.062-.719 1.156c-.844.095-1.188.532-1.344 1.001zM13.199 25.938s-.067.96-.035 1.763c.021.532-.277 1.175-.84 1.081-.562-.094-1.188.021-1.188.021s.125-.365 0-.709-.125-1.062.719-1.156c.844-.094 1.188-.532 1.344-1zm18.684 0s.067.96.035 1.763c-.021.532.277 1.175.84 1.081.562-.094 1.188.021 1.188.021s-.125-.365 0-.709.125-1.062-.719-1.156c-.844-.094-1.188-.532-1.344-1zM18.406 13.375s.594-.031 1.188-.188c.594-.156.406-.718.406-.718s.531-.281.844 0c.312.281.688.25.5-.125.562-.281.812.344.812.344s.281-.177.344-.417c.5-.052.594.448.906.385s.531-.389.531-.389.062.889-.469 1.108c.438.562.312 1.656.312 1.938l-.312-.188s.188.875.281 1c.094.125-.312 0-.312 0s.219.594.375.688c.156.094 3.094-.188 3.938-.188.844 0 2-.125 2-.875s-.969-.688-2.062-.531c-1.094.156-1.812.125-2.25-.156-.438-.281-.937-.354-.896.354-.667-.312-.188-.979-.188-.979s-.761-.833-.276-1.667c.484-.833 2.359-1.084 3.672-.354s1.833 1.333 2.375 1.438c-.021-.396.646-.687.729.042s-.834.583-1.229.354-1.104-.917-1.104-.917-.021.417.25.688c-.75-.083-.916-.646-.916-.646s-.043.603-.73.624c.5-.583.333-1.062-.354-1.312.396.604.021 1.125-.562 1.208.396-.562.063-1.208-.666-1.333.104.458-.25.583-.25.583s-.166-.417-.5-.188-.418.73.019 1.042c.271-.542.812-.5 1-.271-.562.062-.541.584-.333.854.208-.354.417-.458.625-.083s.833.354 1.958.188 2.161-.044 2.333.958c.146.854-.708 1.271-.708 1.271s1.104.833.396 2.646-.416 2.562-.146 2.75.688.208.125.708-.417.855-.188 1.146.167.583-.5.208c-.292.292-.583.208-.75-.042-.167.229-.479.292-.688.042-.208.167-.479.167-.333-.188s.854-.5 1.062-.562.188-.438.125-.854-.417-.854-1.167-1.25c-.333.25-.292.541-.167.688s.521.188.542.312-.208.396-.458.584-.208.521-.125.688.187.577-.084.768c-.271.19-.541-.247-.541-.247s-.168.521-.646.021c-.271.334-.541.209-.666.021-.271.271-.688.25-.479-.125s.458-.376.75-.396.687-.082.646-.666-.156-1.177-.562-1.542c-.625-.562-.521-1.229-.521-1.229s-1.042-.104-1.854.459-1.438.562-1.438.562-.459.5-.5.812.146.417.396.5.438.062.062.396-.688.312-.688.312-.019.353.022.561-.084.569-.292.607c-.208.038-.521-.232-.521-.232s-.396.417-.708-.021c-.354.333-.667.209-.792 0-.208.333-.542.188-.333-.188s.5-.418 1-.396.916-.375.729-.896-.354-1.229-.354-1.229-.396-.042-.979-.375c-.729.875-.979.563-1.188.396s-.708-.625-.708-.625-.271-.021-.229.229c-.292-.021-.188-.479-.188-.708s-.083-.5-.25-.5-.417.042-.417.042 0 .082.25.166.229.251-.021.271-.417.082-.229.229.208.229.062.375-.125.541.125.688c.167-.396.479-.166.417.104s-.521.229-.521.229l.312.354-.476.104s-.024.292-.211.354-.229-.438-.229-.438l-.438-.021.292-.354s-.417-.146-.438-.396.312-.125.375 0c.333-.146.229-.479.104-.604s-.042-.229.083-.375.104-.229-.083-.188-.5-.334-.188-.334.375-.021.333-.25c-.375-.041-.146-.333-.146-.333s-.292-.209-.083-.354c-.188-.166-.229-.438-.021-.479-.125-.104.042-.292.042-.292s-.601-.102-.601-.56.521-.375.521-.375-.062-1.458.083-3.5 1-2.75 1.521-2.958c-.542 1.146-.479 3.083-.479 4.271s-.021 2.125-.021 2.125.583.041.541.437-.312.479-.312.479L18 19.833s-.062-1.389.396-1.944c.458-.555 1.166-1.076 1.375-1.243s-.129-.609-.291-.125c-.236-.029-.438-.417-.438-.417s.021.146-.125.25c-.146.104-.104-.354-.188-.312s-.312.167-.604.25c.021-.167.146-.375.146-.375s-.375.041-.709.083c0-.292.187-.771.354-.812-.417-.208-.312-.604-.125-.542s1.062.583 2.042.646c-.312-.354-.562-.812-.562-.812l-.104.354-.375-.354-.042.354s-.917-.667-1.083-1.208.021-.939.333-.896c.604.082.406.645.406.645z",fill:"#FFB700"}))}},382:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#A7122D",d:"M0 26.518V27a4 4 0 004 4h28a4 4 0 004-4v-.482H0z"}),a.createElement("path",{fill:"#EEE",d:"M0 22.181h36v4.485H0z"}),a.createElement("path",{fill:"#292648",d:"M0 13.513h36v8.821H0z"}),a.createElement("path",{fill:"#EEE",d:"M0 9.181h36v4.485H0z"}),a.createElement("path",{fill:"#A7122D",d:"M0 9.333V9a4 4 0 014-4h28a4 4 0 014 4v.333H0z"}))}},383:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#E30917",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#EEE",d:"M16 24a6 6 0 110-12c1.31 0 2.52.425 3.507 1.138A7.332 7.332 0 0014 10.647 7.353 7.353 0 006.647 18 7.353 7.353 0 0014 25.354c2.195 0 4.16-.967 5.507-2.492A5.963 5.963 0 0116 24zm3.913-5.77l2.44.562.22 2.493 1.288-2.146 2.44.561-1.644-1.888 1.287-2.147-2.303.98-1.644-1.889.22 2.494z"}))}},384:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#DE2910",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("path",{fill:"#FFDE02",d:"M11.136 8.977l.736.356.589-.566-.111.81.72.386-.804.144-.144.804-.386-.72-.81.111.566-.589zm4.665 2.941l-.356.735.566.59-.809-.112-.386.721-.144-.805-.805-.144.721-.386-.112-.809.59.566zm-.957 3.779l.268.772.817.017-.651.493.237.783-.671-.467-.671.467.236-.783-.651-.493.817-.017zm-3.708 3.28l.736.356.589-.566-.111.81.72.386-.804.144-.144.804-.386-.72-.81.111.566-.589zM7 10.951l.929 2.671 2.826.058-2.253 1.708.819 2.706L7 16.479l-2.321 1.615.819-2.706-2.253-1.708 2.826-.058z"}))}},385:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#DE2910",d:"M36 27a4 4 0 01-4 4H4a4 4 0 01-4-4V9a4 4 0 014-4h28a4 4 0 014 4v18z"}),a.createElement("g",{fill:"#FFF"},a.createElement("path",{d:"M19.626 9.201c-.604-.314-1.289-.481-2.035-.31-.906.208-2.011 1.148-2.312 2.24-.142.515-.261.97-.254 1.391.005.29.004.774.039 1.252.024.339.193 1.071.461 1.717l.017-.006c.147.491.633 1.253 1.109 1.878.546.717.973 1.04 1.059 1.039a.564.564 0 01-.162-.137c-.312-.391-.624-1.104-.688-1.587-.124-.943.036-1.625.297-2.444.065-.205.2-.264.289-.211.007.004.011.013.018.019.055.051.089.144.04.314-.125.438-.431 1.54-.268 2.322.15.721.364 1.151.617 1.455a2.555 2.555 0 01-.223-.994c-.004-.224-.023-.446.089-.647.188-.337.462-.518.779-.689.219-.118.425-.279.614-.4.86-.548 1.149-1.632 1.125-2.07l-.021-.327c.018-.119-.036-.446-.179-.774a3.674 3.674 0 00-.412-.673c-.069-.095-.108-.204-.146-.271-.147-.255-.147-.544-.145-.727.001-.216.029-.241.091-.344.049-.082.102-.193.268-.282.122-.064.397-.045.559.038.138.069.164.063.235.102.064.035.231.123.221.088-.039-.132-.523-.672-1.082-.962zm-3.738 9.867c-.941-.129-1.558-.463-2.28-.931-.179-.116-.202-.261-.13-.333l.006-.003c.059-.052.166-.066.332.034.391.236 1.373.821 2.17.871.649.04 1.087-.031 1.43-.161a2.642 2.642 0 01-.89-.068c-.217-.057-.436-.099-.6-.26-.273-.271-.374-.584-.454-.936-.055-.243-.154-.484-.22-.699-.295-.976-1.261-1.547-1.69-1.642l-.32-.067c-.11-.05-.44-.084-.794-.037a3.633 3.633 0 00-.759.216c-.111.042-.225.049-.3.068-.286.073-.564-.005-.739-.056-.208-.06-.225-.094-.307-.182-.066-.069-.159-.148-.2-.333-.029-.134.064-.394.187-.528.104-.112.105-.14.161-.199.051-.053.181-.189.144-.188-.136 0-.786.32-1.215.78-.466.498-.812 1.112-.848 1.876-.043.929.564 2.247 1.534 2.832.456.274.863.513 1.271.619.281.073.746.205 1.216.301.333.067 1.083.104 1.777.02v-.019c.513-.009 1.377-.272 2.106-.56.921-.366 1.371-.736 1.303-.77l-.012.01c-.009.01-.026.013-.044.016-.039.029-.065.06-.125.086-.457.196-1.228.31-1.71.243zm2.516 1.171c-.061-.864-.228-1.358-.306-1.439.006.026.018.038.022.068.061.496-.047 1.267-.247 1.712-.389.867-.883 1.364-1.535 1.927-.108.092-.214.119-.288.099a.122.122 0 01-.094-.094c-.015-.072.024-.176.15-.291.336-.309 1.175-1.085 1.447-1.838.21-.583.269-1.009.25-1.365a2.584 2.584 0 01-.343.872c-.119.189-.225.385-.429.492-.341.179-.67.18-1.029.148-.247-.02-.508.002-.733-.002-1.02-.014-1.856.734-2.076 1.114l-.161.285c-.081.089-.213.393-.274.745-.047.265-.037.56-.025.789.006.118-.022.229-.026.307-.018.294-.176.536-.278.688-.12.179-.157.185-.265.237-.085.041-.19.106-.379.09-.136-.013-.356-.18-.446-.338-.076-.133-.102-.142-.141-.214-.035-.064-.125-.23-.136-.194-.041.13.067.847.375 1.394.334.596.815 1.11 1.533 1.376.871.322 2.311.143 3.162-.606.401-.352.751-.669.976-1.024.155-.245.421-.648.655-1.067.165-.296.425-1.002.556-1.688l-.017-.005c.145-.491.157-1.394.102-2.178z"}),a.createElement("path",{d:"M24.492 23.068c-.181-.503-.346-.943-.596-1.283-.171-.234-.449-.629-.754-1.001-.215-.262-.775-.762-1.367-1.136l-.009.014c-.405-.315-1.241-.657-1.99-.893-.783-.246-1.311-.285-1.453-.252a.549.549 0 01.218.021c.48.141 1.144.549 1.473.908.641.703.898 1.354 1.155 2.176.065.207-.014.334-.12.337-.003 0-.003.005-.006.005-.005 0-.006-.006-.009-.008-.075-.007-.159-.064-.218-.236-.149-.431-.528-1.509-1.109-2.059-.535-.505-.957-.735-1.339-.841-.071-.019-.108-.05-.146-.079-.005.004-.01.003-.015.009l.143.085c.199.107.518.359.756.683.131.182.275.352.3.581.041.382-.078.688-.237 1.013-.11.223-.186.473-.271.681-.387.943.002 1.995.275 2.339l.206.255c.054.108.288.343.593.528.229.141.508.239.727.314.111.037.204.103.275.136.267.123.434.36.538.511.123.177.115.214.124.334.007.094.028.215-.056.384-.062.122-.298.266-.477.293-.152.021-.17.042-.251.052-.072.009-.261.032-.23.056.105.086.812.248 1.434.162.677-.092 1.332-.352 1.842-.921.618-.697.977-2.103.594-3.168z"}),a.createElement("path",{d:"M27.01 15.069c-.496-.786-1.747-1.519-2.878-1.444-.53.036-1.001.074-1.395.219-.273.1-.73.258-1.17.449-.312.135-.946.537-1.468 1.002l.011.013c-.416.302-.976 1.012-1.408 1.667-.455.689-.63 1.171-.635 1.313.014-.057.027-.115.073-.189.266-.424.838-.952 1.274-1.171.85-.425 1.546-.498 2.406-.522.217-.006.317.103.293.205a.139.139 0 01-.025.046c-.041.057-.116.107-.271.115-.454.026-1.595.099-2.281.509-.632.379-.968.723-1.173 1.061a.367.367 0 01-.117.121c.002.005 0 .009.004.015l.122-.115c.157-.161.488-.398.864-.538.21-.078.414-.169.642-.13.379.065.641.265.907.508.185.167.404.309.579.447.802.631 1.921.547 2.327.38l.302-.129c.117-.021.407-.182.671-.424.197-.182.369-.421.499-.611.067-.098.156-.168.208-.227.192-.223.465-.318.638-.377.204-.069.237-.051.355-.026.093.019.215.031.354.159.101.093.174.36.148.54-.021.152-.004.175-.018.255-.012.072-.039.259-.009.237.111-.078.462-.713.551-1.335.096-.675.028-1.376-.38-2.023z"})),a.createElement("path",{d:"M17.79 12.618l-.366.552-.627-.147-.017-.004.411.519-.334.55-.009.016.621-.231.433.502-.029-.663.594-.25.017-.007-.639-.177zm-4.579 4.06l-.002-.018-.342.567-.652-.125.433.502-.31.564-.009.016.611-.257.44.469.013.014-.056-.66.583-.274.017-.008-.645-.151zm10.348-.192l-.643-.163-.07-.659-.353.56-.631-.133-.017-.004.423.51-.323.558-.008.016.615-.246.431.479.013.013-.042-.661.588-.262zm-7.84 5.584l-.002-.017-.34.568-.632-.117-.018-.004.435.499-.306.567-.009.016.609-.261.443.467.013.014-.06-.659.582-.279.016-.008-.646-.146zm5.777-.507l-.001-.018-.373.549-.625-.156-.018-.004.405.524-.341.547-.009.015.623-.224.413.493.012.015-.018-.662.596-.243.018-.006-.636-.186z",fill:"#DE2910"}))}},386:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#FE0000",d:"M32 5H17v13H0v9a4 4 0 004 4h28a4 4 0 004-4V9a4 4 0 00-4-4z"}),a.createElement("path",{fill:"#000095",d:"M17 5H4a4 4 0 00-4 4v9h17V5zm-6.063 4.61l2.035-.548-1.491 1.487a2.881 2.881 0 00-.544-.939zm.251 1.89a2.438 2.438 0 11-4.876 0 2.438 2.438 0 014.876 0zm0-4.222l-.548 2.035a2.871 2.871 0 00-.939-.544l1.487-1.491zM8.75 6.625l.542 2.034c-.175-.033-.357-.052-.542-.052s-.367.019-.542.052l.542-2.034zm-.951 2.144a2.881 2.881 0 00-.939.544l-.548-2.035 1.487 1.491zm-1.236.841a2.871 2.871 0 00-.544.939L4.528 9.062l2.035.548zm-.654 1.348a2.854 2.854 0 000 1.084L3.875 11.5l2.034-.542zm.11 1.492c.121.348.308.666.544.939l-2.035.548 1.491-1.487zm.293 3.272l.548-2.035c.273.236.591.423.939.544l-1.487 1.491zm2.438.653l-.542-2.034a2.854 2.854 0 001.084 0l-.542 2.034zm.951-2.144c.348-.121.666-.308.939-.544l.548 2.035-1.487-1.491zm1.236-.841c.237-.273.423-.591.544-.939l1.491 1.487-2.035-.548zm.654-1.348a2.854 2.854 0 000-1.084l2.034.542-2.034.542z"}),a.createElement("path",{fill:"#FFF",d:"M9.292 8.659L8.75 6.625l-.542 2.034c.175-.033.357-.052.542-.052s.367.019.542.052zM5.857 11.5c0-.185.018-.367.052-.542l-2.034.542 2.034.542a2.93 2.93 0 01-.052-.542zm2.351 2.841l.542 2.034.542-2.034a2.854 2.854 0 01-1.084 0zm3.435-2.841c0 .185-.018.367-.052.542l2.034-.542-2.034-.542c.033.175.052.357.052.542zm-.455-4.222L9.701 8.769c.348.122.666.308.939.544l.548-2.035zm-.251 6.112l2.035.548-1.491-1.487a2.881 2.881 0 01-.544.939zm-4.625 2.332l1.487-1.491a2.889 2.889 0 01-.939-.544l-.548 2.035zm.251-6.112l-2.035-.548 1.491 1.487c.121-.348.307-.665.544-.939zm3.138 4.621l1.487 1.491-.548-2.035a2.881 2.881 0 01-.939.544zM6.019 12.45l-1.491 1.487 2.035-.548a2.86 2.86 0 01-.544-.939zm1.78-3.681L6.312 7.278l.548 2.035c.274-.237.591-.423.939-.544zm5.173.293l-2.035.548c.237.273.423.591.544.939l1.491-1.487z"}),a.createElement("circle",{fill:"#FFF",cx:8.75,cy:11.5,r:2.438}))}},428:function(e,t,n){"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};e.exports=function(){var t=r({},{language_code_only:!1},0<arguments.length&&void 0!==arguments[0]?arguments[0]:{}),e=void 0===navigator.languages?[navigator.language]:navigator.languages;if(e)return e.map(function(e){e=e.trim();return t.language_code_only?e.split(/-|_/)[0]:e})}},430:function(e,t,n){"use strict";window.lzp3_json_process_function_string="return async function(uint8a_or_obj, mode) {\n        \n        var RangeCoder          //no dependencies\n            ,Stream              //no dependencies\n            ,BitStream           //depands on [Stream]\n            ,Util                //depands on [Stream]\n            ,LogDistanceModel    //depands on [Util(Stream)]\n            ,Huffman             //depands on [Util(Stream),BitStream(Stream)]\n            ,NoModel             //depands on [Util(Stream),BitStream(Stream)]\n            ,FenwickModel        //depands on [RangeCoder, Stream, Util(Stream)]\n            ,DefSumModel         //depands on [RangeCoder, Stream, Util(Stream)]\n            ,Context1Model       //depands on [Util(Stream),BitStream(Stream),Huffman(Util(Stream),BitStream(Stream))]\n            ,Lzp3                //depands on [RangeCoder, Stream, Util(Stream), LogDistanceModel(Util(Stream)), NoModel(Util(Stream),BitStream(Stream)), FenwickModel(RangeCoder, Stream, Util(Stream)), Context1Model(Util(Stream),BitStream(Stream),Huffman(Util(Stream),BitStream(Stream)))]\n        ;\n        \n        \n        RangeCoder = (function(){\n            /* Range Coder.  Inspired by rangecod.c from rngcod13.zip from\n             *    http://www.compressconsult.com/rangecoder/\n             * This JavaScript version is:\n             *    Copyright (c) 2013 C. Scott Ananian.\n             */\n        // Uses 32-bit integer math.  Hopefully the JavaScript runtime figures\n        // that out. ;)\n        // see https://github.com/kripken/emscripten/wiki/LLVM-Types-in-JavaScript\n        // for some hints on doing 32-bit unsigned match in JavaScript.\n        // One key is the use of \">>>0\" to change a signed result to unsigned.\n            var CODE_BITS = 32;\n            var Top_value = Math.pow(2, CODE_BITS - 1);\n            var SHIFT_BITS = (CODE_BITS - 9);\n            var EXTRA_BITS = ((CODE_BITS - 2) % 8 + 1);\n            var Bottom_value = (Top_value >>> 8);\n        \n            var MAX_INT = Math.pow(2, CODE_BITS) - 1;\n        \n            /* it is highly recommended that the total frequency count is less  */\n            /* than 1 << 19 to minimize rounding effects.                       */\n            /* the total frequency count MUST be less than 1<<23                */\n        \n        \n            var RangeCoder = function(stream) {\n                this.low = 0; /* low end of interval */\n                this.range = Top_value; /* length of interval */\n                this.buffer = 0; /* buffer for input/output */\n                this.help = 0; /* bytes_to_follow / intermediate value */\n                this.bytecount = 0; /* counter for output bytes */\n                this.stream = stream;\n            };\n        \n            /* Do the normalization before we need a defined state, instead of\n             * after messing it up.  This simplifies starting and ending. */\n            var enc_normalize = function(rc, outputStream) {\n                while (rc.range <= Bottom_value) { /* do we need renormalization? */\n                    if (rc.low < (0xFF << SHIFT_BITS)) { //no carry possible, so output\n                        outputStream.writeByte(rc.buffer);\n                        for (; rc.help; rc.help--)\n                            outputStream.writeByte(0xFF);\n                        rc.buffer = (rc.low >>> SHIFT_BITS) & 0xFF;\n                    } else if (rc.low & Top_value) { /* carry now, no future carry */\n                        outputStream.writeByte(rc.buffer + 1);\n                        for (; rc.help; rc.help--)\n                            outputStream.writeByte(0x00);\n                        rc.buffer = (rc.low >>> SHIFT_BITS) & 0xFF;\n                    } else {\n                        rc.help++;\n                        if (rc.help > MAX_INT)\n                            throw new Error(\"Too many bytes outstanding, \" +\n                                \"file too large!\");\n                    }\n                    rc.range = (rc.range << 8) >>> 0; /*ensure result remains positive*/\n                    rc.low = ((rc.low << 8) & (Top_value - 1)) >>> 0; /* unsigned */\n                    rc.bytecount++;\n                }\n            };\n        \n            /* Start the encoder                                         */\n            /* c is written as the first byte in the datastream.\n             * one could do w/o, but then you have an additional if per output byte */\n            RangeCoder.prototype.encodeStart = function(c, initlength) {\n                this.low = 0;\n                this.range = Top_value;\n                this.buffer = c;\n                this.help = 0;\n                this.bytecount = initlength;\n            };\n        \n            /* Encode a symbol using frequencies                         */\n            /* rc is the range coder to be used                          */\n            /* sy_f is the interval length (frequency of the symbol)     */\n            /* lt_f is the lower end (frequency sum of < symbols)        */\n            /* tot_f is the total interval length (total frequency sum)  */\n            /* or (faster): tot_f = (code_value)1<<shift                             */\n            RangeCoder.prototype.encodeFreq = function(sy_f, lt_f, tot_f) {\n                enc_normalize(this, this.stream);\n                var r = (this.range / tot_f) >>> 0; // note coercion to integer\n                var tmp = r * lt_f;\n                this.low += tmp;\n                if ((lt_f + sy_f) < tot_f) {\n                    this.range = r * sy_f;\n                } else {\n                    this.range -= tmp;\n                }\n            };\n            RangeCoder.prototype.encodeShift = function(sy_f, lt_f, shift) {\n                enc_normalize(this, this.stream);\n                var r = this.range >>> shift;\n                var tmp = r * lt_f;\n                this.low += tmp;\n                if ((lt_f + sy_f) >>> shift) {\n                    this.range -= tmp;\n                } else {\n                    this.range = r * sy_f;\n                }\n            };\n            /* Encode a bit w/o modelling. */\n            RangeCoder.prototype.encodeBit = function(b) {\n                this.encodeShift(1, b ? 1 : 0, 1);\n            };\n            /* Encode a byte w/o modelling. */\n            RangeCoder.prototype.encodeByte = function(b) {\n                this.encodeShift(1, b, 8);\n            };\n            /* Encode a short w/o modelling. */\n            RangeCoder.prototype.encodeShort = function(s) {\n                this.encodeShift(1, s, 16);\n            };\n        \n            /* Finish encoding                                           */\n            /* returns number of bytes written                           */\n            RangeCoder.prototype.encodeFinish = function() {\n                var outputStream = this.stream;\n                enc_normalize(this, outputStream);\n                this.bytecount += 5;\n                var tmp = this.low >>> SHIFT_BITS;\n                if ((this.low & (Bottom_value - 1)) >= ((this.bytecount & 0xFFFFFF) >>> 1)) {\n                    tmp++;\n                }\n                if (tmp > 0xFF) { /* we have a carry */\n                    outputStream.writeByte(this.buffer + 1);\n                    for (; this.help; this.help--)\n                        outputStream.writeByte(0x00);\n                } else { /* no carry */\n                    outputStream.writeByte(this.buffer);\n                    for (; this.help; this.help--)\n                        outputStream.writeByte(0xFF);\n                }\n                outputStream.writeByte(tmp & 0xFF);\n                // XXX: i'm pretty sure these could be three arbitrary bytes\n                //      they are consumed by the decoder at the end\n                outputStream.writeByte((this.bytecount >>> 16) & 0xFF);\n                outputStream.writeByte((this.bytecount >>> 8) & 0xFF);\n                outputStream.writeByte((this.bytecount) & 0xFF);\n                return this.bytecount;\n            };\n        \n            /* Start the decoder; you need to provide the *second* byte from the\n             * datastream. (The first byte was provided to startEncoding and is\n             * ignored by the decoder.)\n             */\n            RangeCoder.prototype.decodeStart = function(skipInitialRead) {\n                var c = skipInitialRead ? 0 : this.stream.readByte();\n                if (typeof(c) !== 'number' || c < 0) {\n                    return c; // EOF\n                }\n                this.buffer = this.stream.readByte();\n                this.low = this.buffer >>> (8 - EXTRA_BITS);\n                this.range = 1 << EXTRA_BITS;\n                return c;\n            };\n        \n            var dec_normalize = function(rc, inputStream) {\n                while (rc.range <= Bottom_value) {\n                    rc.low = (rc.low << 8) | ((rc.buffer << EXTRA_BITS) & 0xFF);\n                    /* rc.low could be negative here; don't fix it quite yet */\n                    rc.buffer = inputStream.readByte();\n                    rc.low |= rc.buffer >>> (8 - EXTRA_BITS);\n                    rc.low = rc.low >>> 0; /* fix it now */\n                    rc.range = (rc.range << 8) >>> 0; /* ensure stays positive */\n                }\n            };\n        \n            /* Calculate cumulative frequency for next symbol. Does NO update!*/\n            /* rc is the range coder to be used                          */\n            /* tot_f is the total frequency                              */\n            /* or: totf is (code_value)1<<shift                                      */\n            /* returns the <= cumulative frequency                         */\n            RangeCoder.prototype.decodeCulFreq = function(tot_f) {\n                dec_normalize(this, this.stream);\n                this.help = (this.range / tot_f) >>> 0; // note coercion to integer\n                var tmp = (this.low / this.help) >>> 0; // again\n                return (tmp >= tot_f ? tot_f - 1 : tmp);\n            };\n            RangeCoder.prototype.decodeCulShift = function(shift) {\n                dec_normalize(this, this.stream);\n                this.help = this.range >>> shift;\n                var tmp = (this.low / this.help) >>> 0; // coercion to unsigned\n                // shift is less than 31, so shift below will remain positive\n                return ((tmp >>> shift) ? (1 << shift) - 1 : tmp);\n            };\n        \n            /* Update decoding state                                     */\n            /* rc is the range coder to be used                          */\n            /* sy_f is the interval length (frequency of the symbol)     */\n            /* lt_f is the lower end (frequency sum of < symbols)        */\n            /* tot_f is the total interval length (total frequency sum)  */\n            RangeCoder.prototype.decodeUpdate = function(sy_f, lt_f, tot_f) {\n                var tmp = this.help * lt_f; // should not overflow!\n                this.low -= tmp;\n                if (lt_f + sy_f < tot_f) {\n                    this.range = (this.help * sy_f);\n                } else {\n                    this.range -= tmp;\n                }\n            };\n        \n            /* Decode a bit w/o modelling. */\n            RangeCoder.prototype.decodeBit = function() {\n                var tmp = this.decodeCulShift(1);\n                this.decodeUpdate(1, tmp, 1 << 1);\n                return tmp;\n            };\n            /* decode a byte w/o modelling */\n            RangeCoder.prototype.decodeByte = function() {\n                var tmp = this.decodeCulShift(8);\n                this.decodeUpdate(1, tmp, 1 << 8);\n                return tmp;\n            };\n            /* decode a short w/o modelling */\n            RangeCoder.prototype.decodeShort = function() {\n                var tmp = this.decodeCulShift(16);\n                this.decodeUpdate(1, tmp, 1 << 16);\n                return tmp;\n            };\n        \n            /* Finish decoding */\n            RangeCoder.prototype.decodeFinish = function() {\n                /* normalize to use up all bytes */\n                dec_normalize(this, this.stream);\n            };\n        \n            /** Utility functions */\n        \n        // bitstream interface\n            RangeCoder.prototype.writeBit = RangeCoder.prototype.encodeBit;\n            RangeCoder.prototype.readBit = RangeCoder.prototype.decodeBit;\n        \n        // stream interface\n            RangeCoder.prototype.writeByte = RangeCoder.prototype.encodeByte;\n            RangeCoder.prototype.readByte = RangeCoder.prototype.decodeByte;\n        \n            return RangeCoder;\n        \n        }());\n        \n        \n        Stream = (function(){\n            /** Abstract Stream interface, for byte-oriented i/o. */\n            var EOF = -1;\n        \n            var Stream = function() {\n                /* ABSTRACT */\n            };\n        // you must define one of read / readByte for a readable stream\n            Stream.prototype.readByte = function() {\n                var buf = [0];\n                var len = this.read(buf, 0, 1);\n                if (len === 0) { this._eof = true; return EOF; }\n                return buf[0];\n            };\n            Stream.prototype.read = function(buf, bufOffset, length) {\n                var ch, bytesRead = 0;\n                while (bytesRead < length) {\n                    ch = this.readByte();\n                    if (ch === EOF) { this._eof = true; break; }\n                    buf[bufOffset + (bytesRead++)] = ch;\n                }\n                return bytesRead;\n            };\n            Stream.prototype.eof = function() { return !!this._eof; };    // reasonable default implementation of 'eof'\n            Stream.prototype.seek = function(pos) {                       // not all readable streams are seekable\n                throw new Error('Stream is not seekable.');\n            };\n            Stream.prototype.tell = function() {\n                throw new Error('Stream is not seekable.');\n            };\n            Stream.prototype.writeByte = function(_byte) {    // you must define one of write / writeByte for a writable stream\n                var buf = [_byte];\n                this.write(buf, 0, 1);\n            };\n            Stream.prototype.write = function(buf, bufOffset, length) {\n                var i;\n                for (i = 0; i < length; i++) {\n                    this.writeByte(buf[bufOffset + i]);\n                }\n                return length;\n            };\n            Stream.prototype.flush = function(){};      //flush will happily do nothing if you don't override it.\n            Stream.EOF = EOF;                           //export EOF as a constant.\n        \n            return Stream;\n        }());\n        \n        \n        BitStream = (function(){\n            /** Big-Endian Bit Stream, implemented on top of a (normal byte) stream. */\n            var BitStream = function(stream) {\n                (function() {\n                    var bufferByte = 0x100; // private var for readers\n                    this.readBit = function() {\n                        if ((bufferByte & 0xFF) === 0) {\n                            var ch = stream.readByte();\n                            if (ch === Stream.EOF) {\n                                this._eof = true;\n                                return ch; /* !!! */\n                            }\n                            bufferByte = (ch << 1) | 1;\n                        }\n                        var bit = (bufferByte & 0x100) ? 1 : 0;\n                        bufferByte <<= 1;\n                        return bit;\n                    };\n                    // seekable iff the provided stream is\n                    this.seekBit = function(pos) {\n                        var n_byte = pos >>> 3;\n                        var n_bit = pos - (n_byte * 8);\n                        this.seek(n_byte);\n                        this._eof = false;\n                        this.readBits(n_bit);\n                    };\n                    this.tellBit = function() {\n                        var pos = stream.tell() * 8;\n                        var b = bufferByte;\n                        while ((b & 0xFF) !== 0) {\n                            pos--;\n                            b <<= 1;\n                        }\n                        return pos;\n                    };\n                    // implement byte stream interface as well.\n                    this.readByte = function() {\n                        if ((bufferByte & 0xFF) === 0) {\n                            return stream.readByte();\n                        }\n                        return this.readBits(8);\n                    };\n                    this.seek = function(pos) {\n                        stream.seek(pos);\n                        bufferByte = 0x100;\n                    };\n                })\n                    .call(this);\n                (function() {\n                    var bufferByte = 1; // private var for writers\n                    this.writeBit = function(b) {\n                        bufferByte <<= 1;\n                        if (b) { bufferByte |= 1; }\n                        if (bufferByte & 0x100) {\n                            stream.writeByte(bufferByte & 0xFF);\n                            bufferByte = 1;\n                        }\n                    };\n                    // implement byte stream interface as well\n                    this.writeByte = function(_byte) {\n                        if (bufferByte === 1) {\n                            stream.writeByte(_byte);\n                        } else {\n                            stream.writeBits(8, _byte);\n                        }\n                    };\n                    this.flush = function() {\n                        while (bufferByte !== 1) {\n                            this.writeBit(0);\n                        }\n                        if (stream.flush) { stream.flush(); }\n                    };\n                })\n                    .call(this);\n            };\n        // inherit read/write methods from Stream.\n            BitStream.EOF = Stream.EOF;\n            BitStream.prototype = Object.create(Stream.prototype);\n        // bit chunk read/write\n            BitStream.prototype.readBits = function(n) {\n                var i, r = 0\n                    , b;\n                if (n > 31) {\n                    r = this.readBits(n - 16) * 0x10000; // fp multiply, not shift\n                    return r + this.readBits(16);\n                }\n                for (i = 0; i < n; i++) {\n                    r <<= 1; // this could make a negative value if n>31\n                    // bits read past EOF are all zeros!\n                    if (this.readBit() > 0) { r++; }\n                }\n                return r;\n            };\n            BitStream.prototype.writeBits = function(n, value) {\n                if (n > 32) {\n                    var low = (value & 0xFFFF);\n                    var high = (value - low) / (0x10000); // fp division, not shift\n                    this.writeBits(n - 16, high);\n                    this.writeBits(16, low);\n                    return;\n                }\n                var i;\n                for (i = n - 1; i >= 0; i--) {\n                    this.writeBit((value >>> i) & 1);\n                }\n            };\n        \n            return BitStream;\n        }());\n        \n        \n        Util = (function(){\n            var Util = Object.create(null);\n        \n            var EOF = Stream.EOF;\n        \n            /* Take a buffer, array, or stream, and return an input stream. */\n            Util.coerceInputStream = function(input, forceRead) {\n                if (!('readByte' in input)) {\n                    var buffer = input;\n                    input = new Stream();\n                    input.size = buffer.length;\n                    input.pos = 0;\n                    input.readByte = function() {\n                        if (this.pos >= this.size) { return EOF; }\n                        return buffer[this.pos++];\n                    };\n                    input.read = function(buf, bufOffset, length) {\n                        var bytesRead = 0;\n                        while (bytesRead < length && this.pos < buffer.length) {\n                            buf[bufOffset++] = buffer[this.pos++];\n                            bytesRead++;\n                        }\n                        return bytesRead;\n                    };\n                    input.seek = function(pos) { this.pos = pos; };\n                    input.tell = function() { return this.pos; };\n                    input.eof = function() { return this.pos >= buffer.length; };\n                } else if (forceRead && !('read' in input)) {\n                    // wrap input if it doesn't implement read\n                    var s = input;\n                    input = new Stream();\n                    input.readByte = function() {\n                        var ch = s.readByte();\n                        if (ch === EOF) { this._eof = true; }\n                        return ch;\n                    };\n                    if ('size' in s) { input.size = s.size; }\n                    if ('seek' in s) {\n                        input.seek = function(pos) {\n                            s.seek(pos); // may throw if s doesn't implement seek\n                            this._eof = false;\n                        };\n                    }\n                    if ('tell' in s) {\n                        input.tell = s.tell.bind(s);\n                    }\n                }\n                return input;\n            };\n        \n            var BufferStream = function(buffer, resizeOk) {\n                this.buffer = buffer;\n                this.resizeOk = resizeOk;\n                this.pos = 0;\n            };\n            BufferStream.prototype = Object.create(Stream.prototype);\n            BufferStream.prototype.writeByte = function(_byte) {\n                if (this.resizeOk && this.pos >= this.buffer.length) {\n                    var newBuffer = Util.makeU8Buffer(this.buffer.length * 2);\n                    newBuffer.set(this.buffer);\n                    this.buffer = newBuffer;\n                }\n                this.buffer[this.pos++] = _byte;\n            };\n            BufferStream.prototype.getBuffer = function() {\n                // trim buffer if needed\n                if (this.pos !== this.buffer.length) {\n                    if (!this.resizeOk)\n                        throw new TypeError('outputsize does not match decoded input');\n                    var newBuffer = Util.makeU8Buffer(this.pos);\n                    newBuffer.set(this.buffer.subarray(0, this.pos));\n                    this.buffer = newBuffer;\n                }\n                return this.buffer;\n            };\n        \n            /* Take a stream (or not) and an (optional) size, and return an\n             * output stream.  Return an object with a 'retval' field equal to\n             * the output stream (if that was given) or else a pointer at the\n             * internal Uint8Array/buffer/array; and a 'stream' field equal to\n             * an output stream to use.\n             */\n            Util.coerceOutputStream = function(output, size) {\n                var r = { stream: output, retval: output };\n                if (output) {\n                    if (typeof(output) === 'object' && 'writeByte' in output) {\n                        return r; /* leave output alone */\n                    } else if (typeof(size) === 'number') {\n                        console.assert(size >= 0);\n                        r.stream = new BufferStream(Util.makeU8Buffer(size), false);\n                    } else { // output is a buffer\n                        r.stream = new BufferStream(output, false);\n                    }\n                } else {\n                    r.stream = new BufferStream(Util.makeU8Buffer(16384), true);\n                }\n                Object.defineProperty(r, 'retval', {\n                    get: r.stream.getBuffer.bind(r.stream)\n                });\n                return r;\n            };\n        \n            Util.compressFileHelper = function(magic, guts, suppressFinalByte) {\n                return function(inStream, outStream, props) {\n                    inStream = Util.coerceInputStream(inStream);\n                    var o = Util.coerceOutputStream(outStream, outStream);\n                    outStream = o.stream;\n        \n                    // write the magic number to identify this file type\n                    // (it better be ASCII, we're not doing utf-8 conversion)\n                    var i;\n                    for (i = 0; i < magic.length; i++) {\n                        outStream.writeByte(magic.charCodeAt(i));\n                    }\n        \n                    // if we know the size, write it\n                    var fileSize;\n                    if ('size' in inStream && inStream.size >= 0) {\n                        fileSize = inStream.size;\n                    } else {\n                        fileSize = -1; // size unknown\n                    }\n                    if (suppressFinalByte) {\n                        var tmpOutput = Util.coerceOutputStream([]);\n                        Util.writeUnsignedNumber(tmpOutput.stream, fileSize + 1);\n                        tmpOutput = tmpOutput.retval;\n                        for (i = 0; i < tmpOutput.length - 1; i++) {\n                            outStream.writeByte(tmpOutput[i]);\n                        }\n                        suppressFinalByte = tmpOutput[tmpOutput.length - 1];\n                    } else {\n                        Util.writeUnsignedNumber(outStream, fileSize + 1);\n                    }\n        \n                    // call the guts to do the real compression\n                    guts(inStream, outStream, fileSize, props, suppressFinalByte);\n        \n                    return o.retval;\n                };\n            };\n            Util.decompressFileHelper = function(magic, guts) {\n                return function(inStream, outStream) {\n                    inStream = Util.coerceInputStream(inStream);\n        \n                    // read the magic number to confirm this file type\n                    // (it better be ASCII, we're not doing utf-8 conversion)\n                    var i;\n                    for (i = 0; i < magic.length; i++) {\n                        if (magic.charCodeAt(i) !== inStream.readByte()) {\n                            throw new Error(\"Bad magic\");\n                        }\n                    }\n        \n                    // read the file size & create an appropriate output stream/buffer\n                    var fileSize = Util.readUnsignedNumber(inStream) - 1;\n                    var o = Util.coerceOutputStream(outStream, fileSize);\n                    outStream = o.stream;\n        \n                    // call the guts to do the real decompression\n                    guts(inStream, outStream, fileSize);\n        \n                    return o.retval;\n                };\n            };\n        // a helper for simple self-test of model encode\n            Util.compressWithModel = function(inStream, fileSize, model) {\n                var inSize = 0;\n                while (inSize !== fileSize) {\n                    var ch = inStream.readByte();\n                    if (ch === EOF) {\n                        model.encode(256); // end of stream;\n                        break;\n                    }\n                    model.encode(ch);\n                    inSize++;\n                }\n            };\n        // a helper for simple self-test of model decode\n            Util.decompressWithModel = function(outStream, fileSize, model) {\n                var outSize = 0;\n                while (outSize !== fileSize) {\n                    var ch = model.decode();\n                    if (ch === 256) {\n                        break; // end of stream;\n                    }\n                    outStream.writeByte(ch);\n                    outSize++;\n                }\n            };\n        \n            /** Write a number using a self-delimiting big-endian encoding. */\n            Util.writeUnsignedNumber = function(output, n) {\n                console.assert(n >= 0);\n                var bytes = []\n                    , i;\n                do {\n                    bytes.push(n & 0x7F);\n                    // use division instead of shift to allow encoding numbers up to\n                    // 2^53\n                    n = Math.floor(n / 128);\n                } while (n !== 0);\n                bytes[0] |= 0x80; // mark end of encoding.\n                for (i = bytes.length - 1; i >= 0; i--) {\n                    output.writeByte(bytes[i]); // write in big-endian order\n                }\n                return output;\n            };\n        \n            /** Read a number using a self-delimiting big-endian encoding. */\n            Util.readUnsignedNumber = function(input) {\n                var n = 0\n                    , c;\n                while (true) {\n                    c = input.readByte();\n                    if (c & 0x80) { n += (c & 0x7F); break; }\n                    // using + and * instead of << allows decoding numbers up to 2^53\n                    n = (n + c) * 128;\n                }\n                return n;\n            };\n        \n        // Compatibility thunks for Buffer/TypedArray constructors.\n        \n            var zerofill = function(a) {\n                for (var i = 0, len = a.length; i < len; i++) {\n                    a[i] = 0;\n                }\n                return a;\n            };\n        \n            var fallbackarray = function(size) {\n                return zerofill(new Array(size));\n            };\n        \n        // Node 0.11.6 - 0.11.10ish don't properly zero fill typed arrays.\n        // See https://github.com/joyent/node/issues/6664\n        // Try to detect and workaround the bug.\n            var ensureZeroed = function id(a) { return a; };\n            if ((typeof(process) !== 'undefined') &&\n                Array.prototype.some.call(new Uint32Array(128), function(x) {\n                    return x !== 0;\n                })) {\n                //console.warn('Working around broken TypedArray');\n                ensureZeroed = zerofill;\n            }\n        \n            /** Portable 8-bit unsigned buffer. */\n            Util.makeU8Buffer = (typeof(Uint8Array) !== 'undefined') ? function(size) {\n                // Uint8Array ought to be  automatically zero-filled\n                return ensureZeroed(new Uint8Array(size));\n            } : (typeof(Buffer) !== 'undefined') ? function(size) {\n                var b = new Buffer(size);\n                b.fill(0);\n                return b;\n            } : fallbackarray;\n        \n            /** Portable 16-bit unsigned buffer. */\n            Util.makeU16Buffer = (typeof(Uint16Array) !== 'undefined') ? function(size) {\n                // Uint16Array ought to be  automatically zero-filled\n                return ensureZeroed(new Uint16Array(size));\n            } : fallbackarray;\n        \n            /** Portable 32-bit unsigned buffer. */\n            Util.makeU32Buffer = (typeof(Uint32Array) !== 'undefined') ? function(size) {\n                // Uint32Array ought to be  automatically zero-filled\n                return ensureZeroed(new Uint32Array(size));\n            } : fallbackarray;\n        \n            /** Portable 32-bit signed buffer. */\n            Util.makeS32Buffer = (typeof(Int32Array) !== 'undefined') ? function(size) {\n                // Int32Array ought to be  automatically zero-filled\n                return ensureZeroed(new Int32Array(size));\n            } : fallbackarray;\n        \n            Util.arraycopy = function(dst, src) {\n                console.assert(dst.length >= src.length);\n                for (var i = 0, len = src.length; i < len; i++) {\n                    dst[i] = src[i];\n                }\n                return dst;\n            };\n        \n            /** Highest bit set in a byte. */\n            var bytemsb = [\n                0\n                ,1\n                ,2, 2\n                ,3, 3, 3, 3\n                ,4, 4, 4, 4, 4, 4, 4, 4\n                ,5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n                ,6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\n                ,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\n                ,8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 /* 256 */\n            ];\n            console.assert(bytemsb.length === 0x100);\n            /** Find last set (most significant bit).\n             *  @return the last bit set in the argument.\n             *          <code>fls(0)==0</code> and <code>fls(1)==1</code>. */\n            var fls = Util.fls = function(v) {\n                console.assert(v >= 0);\n                if (v > 0xFFFFFFFF) { // use floating-point mojo\n                    return 32 + fls(Math.floor(v / 0x100000000));\n                }\n                if ((v & 0xFFFF0000) !== 0) {\n                    if ((v & 0xFF000000) !== 0) {\n                        return 24 + bytemsb[(v >>> 24) & 0xFF];\n                    } else {\n                        return 16 + bytemsb[v >>> 16];\n                    }\n                } else if ((v & 0x0000FF00) !== 0) {\n                    return 8 + bytemsb[v >>> 8];\n                } else {\n                    return bytemsb[v];\n                }\n            };\n            /** Returns ceil(log2(n)) */\n            Util.log2c = function(v) {\n                return (v === 0) ? -1 : fls(v - 1);\n            };\n        \n            return Util; // ensure constants are recognized as such.\n        }());\n        \n        \n        LogDistanceModel = (function(){\n            /** Simple (log n)(n) distance model. */\n        \n        // lengthBitsModelFactory will be called with arguments 2, 4, 8, 16, etc\n        // and must return an appropriate model or coder.\n            var LogDistanceModel = function(size, extraStates\n                , lgDistanceModelFactory\n                , lengthBitsModelFactory) {\n                var i;\n                var bits = Util.fls(size - 1);\n                this.extraStates = +extraStates || 0;\n                this.lgDistanceModel = lgDistanceModelFactory(1 + bits + extraStates);\n                // this.distanceModel[n] used for distances which are n-bits long,\n                // but only n-1 bits are encoded: the top bit is known to be one.\n                this.distanceModel = [];\n                for (i = 2; i <= bits; i++) {\n                    var numBits = i - 1;\n                    this.distanceModel[i] = lengthBitsModelFactory(1 << numBits);\n                }\n            };\n            /* you can give this model arguments between 0 and (size-1), or else\n               a negative argument which is one of the 'extra states'. */\n            LogDistanceModel.prototype.encode = function(distance) {\n                if (distance < 2) { // small distance or an 'extra state'\n                    this.lgDistanceModel.encode(distance + this.extraStates);\n                    return;\n                }\n                var lgDistance = Util.fls(distance);\n                console.assert(distance & (1 << (lgDistance - 1))); // top bit is set\n                console.assert(lgDistance >= 2);\n                this.lgDistanceModel.encode(lgDistance + this.extraStates);\n                // now encode the rest of the bits.\n                var rest = distance & ((1 << (lgDistance - 1)) - 1);\n                this.distanceModel[lgDistance].encode(rest);\n            };\n            LogDistanceModel.prototype.decode = function() {\n                var lgDistance = this.lgDistanceModel.decode() - this.extraStates;\n                if (lgDistance < 2) {\n                    return lgDistance; // this is a small distance or an 'extra state'\n                }\n                var rest = this.distanceModel[lgDistance].decode();\n                return (1 << (lgDistance - 1)) + rest;\n            };\n        \n            return LogDistanceModel;\n        \n        }());\n        \n        \n        Huffman = (function(){\n            /* Adaptive Huffman code, using Vitter's algorithm ported from\n             * vitter.c at http://code.google.com/p/compression-code/downloads/list\n             * The original code was placed in the public domain, and so I\n             * also place this JavaScript port in the public domain.\n             *   -- C. Scott Ananian <cscott@cscott.net>, 2013\n             * ps. some truly grotty C code in the originally, faithfully ported to\n             *     evil comma-operator-using, assignment-in-if-condition JavaScript.\n             */\n        \n        //  This code is adapted from Professor Vitter's\n        //  article, Design and Analysis of Dynamic Huffman Codes,\n        //  which appeared in JACM October 1987\n        \n        //  A design trade-off has been made to simplify the\n        //  code:  a node's block is determined dynamically,\n        //  and the implicit tree structure is maintained,\n        //  e.g. explicit node numbers are also implicit.\n        \n        //  Dynamic Huffman table weight ranking\n        //  is maintained per Professor Vitter's\n        //  invariant (*) for algorithm FGK:\n        \n        //  leaves precede internal nodes of the\n        //  same weight in a non-decreasing ranking\n        //  of weights using implicit node numbers:\n        \n        //  1) leaves slide over internal nodes, internal nodes\n        //  swap over groups of leaves, leaves are swapped\n        //  into group leader position, but two internal\n        //  nodes never change positions relative\n        //  to one another.\n        \n        //  2) weights are incremented by 2:\n        //  leaves always have even weight values;\n        //  internal nodes always have odd values.\n        \n        //  3) even node numbers are always right children;\n        //  odd numbers are left children in the tree.\n        \n        //  node 2 * HuffSize - 1 is always the tree root;\n        //  node HuffEsc is the escape node;\n        \n        //  the tree is initialized by creating an\n        //  escape node as the root.\n        \n        //  each new leaf symbol is paired with a new escape\n        //  node into the previous escape node in the tree,\n        //  until the last symbol which takes over the\n        //  tree position of the escape node, and\n        //  HuffEsc is left at zero.\n        \n        //  overall table size: 2 * HuffSize\n        \n        //  huff_init(alphabet_size, potential symbols used)\n        //  huff_encode(next_symbol)\n        //  next_symbol = huff_decode()\n        \n        //  huff_scale(by_bits) -- scale weights and re-balance tree\n        \n            var HTable = function(up, down, symbol, weight) {\n                this.up = up; // next node up the tree\n                this.down = down; // pair of down nodes\n                this.symbol = symbol; // node symbol value\n                this.weight = weight; // node weight\n            };\n            HTable.prototype.clone = function() {\n                return new HTable(this.up, this.down, this.symbol, this.weight);\n            };\n            HTable.prototype.set = function(htable) {\n                this.up = htable.up;\n                this.down = htable.down;\n                this.symbol = htable.symbol;\n                this.weight = htable.weight;\n            };\n        \n        //  initialize an adaptive coder\n        //  for alphabet size, and count\n        //  of nodes to be used\n            var Huffman = function(size, root, bitstream, max_weight) {\n                var i;\n                //  default: all alphabet symbols are used\n        \n                console.assert(size && typeof(size) === 'number');\n                if (!root || root > size)\n                    root = size;\n        \n                //  create the initial escape node\n                //  at the tree root\n        \n                if (root <<= 1) {\n                    root--;\n                }\n        \n                // create root+1 htables (coding table)\n                // XXX this could be views on a backing Uint32 array?\n                this.table = [];\n                for (i = 0; i <= root; i++) {\n                    this.table[i] = new HTable(0, 0, 0, 0);\n                }\n        \n                // this.map => mapping for symbols to nodes\n                this.map = [];\n                // this.size => the alphabet size\n                if (this.size = size) {\n                    for (i = 0; i < size; i++) {\n                        this.map[i] = 0;\n                    }\n                }\n        \n                // this.esc  => the current tree height\n                // this.root => the root of the tree\n                this.esc = this.root = root;\n        \n                if (bitstream) {\n                    this.readBit = bitstream.readBit.bind(bitstream);\n                    this.writeBit = bitstream.writeBit.bind(bitstream);\n                }\n                this.max_weight = max_weight; // may be null or undefined\n            }\n        // factory interface\n            Huffman.factory = function(bitstream, max_weight) {\n                return function(size) {\n                    return new Huffman(size, size, bitstream, max_weight);\n                };\n            };\n        \n        \n        // split escape node to incorporate new symbol\n        \n            Huffman.prototype.split = function(symbol) {\n                var pair, node;\n        \n                //  is the tree already full???\n        \n                if (pair = this.esc) {\n                    this.esc--;\n                } else {\n                    console.assert(false);\n                    return 0;\n                }\n        \n                //  if this is the last symbol, it moves into\n                //  the escape node's old position, and\n                //  this.esc is set to zero.\n        \n                //  otherwise, the escape node is promoted to\n                //  parent a new escape node and the new symbol.\n        \n                if (node = this.esc) {\n                    this.table[pair].down = node;\n                    this.table[pair].weight = 1;\n                    this.table[node].up = pair;\n                    this.esc--;\n                } else {\n                    pair = 0;\n                    node = 1;\n                }\n        \n                //  initialize the new symbol node\n        \n                this.table[node].symbol = symbol;\n                this.table[node].weight = 0;\n                this.table[node].down = 0;\n                this.map[symbol] = node;\n        \n                //  initialize a new escape node.\n        \n                this.table[this.esc].weight = 0;\n                this.table[this.esc].down = 0;\n                this.table[this.esc].up = pair;\n                return node;\n            };\n        \n        //  swap leaf to group leader position\n        //  return symbol's new node\n        \n            Huffman.prototype.leader = function(node) {\n                var weight = this.table[node].weight;\n                var leader = node\n                    , prev, symbol;\n        \n                while (weight === this.table[leader + 1].weight) {\n                    leader++;\n                }\n        \n                if (leader === node) {\n                    return node;\n                }\n        \n                // swap the leaf nodes\n        \n                symbol = this.table[node].symbol;\n                prev = this.table[leader].symbol;\n        \n                this.table[leader].symbol = symbol;\n                this.table[node].symbol = prev;\n                this.map[symbol] = leader;\n                this.map[prev] = node;\n                return leader;\n            };\n        \n        //  slide internal node up over all leaves of equal weight;\n        //  or exchange leaf with next smaller weight internal node\n        \n        //  return node's new position\n        \n            Huffman.prototype.slide = function(node) {\n                var next = node;\n                var swap;\n        \n                swap = this.table[next++].clone();\n        \n                // if we're sliding an internal node, find the\n                // highest possible leaf to exchange with\n        \n                if (swap.weight & 1) {\n                    while (swap.weight > this.table[next + 1].weight) {\n                        next++;\n                    }\n                }\n        \n                //  swap the two nodes\n        \n                this.table[node].set(this.table[next]);\n                this.table[next].set(swap);\n        \n                this.table[next].up = this.table[node].up;\n                this.table[node].up = swap.up;\n        \n                //  repair the symbol map and tree structure\n        \n                if (swap.weight & 1) {\n                    this.table[swap.down].up = next;\n                    this.table[swap.down - 1].up = next;\n                    this.map[this.table[node].symbol] = node;\n                } else {\n                    this.table[this.table[node].down - 1].up = node;\n                    this.table[this.table[node].down].up = node;\n                    this.map[swap.symbol] = next;\n                }\n        \n                return next;\n            };\n        \n        //  increment symbol weight and re balance the tree.\n        \n            Huffman.prototype.increment = function(node) {\n                var up;\n        \n                //  obviate swapping a parent with its child:\n                //    increment the leaf and proceed\n                //    directly to its parent.\n        \n                //  otherwise, promote leaf to group leader position in the tree\n        \n                if (this.table[node].up === node + 1) {\n                    this.table[node].weight += 2;\n                    node++;\n                } else {\n                    node = this.leader(node);\n                }\n        \n                //  increase the weight of each node and slide\n                //  over any smaller weights ahead of it\n                //  until reaching the root\n        \n                //  internal nodes work upwards from\n                //  their initial positions; while\n                //  symbol nodes slide over first,\n                //  then work up from their final\n                //  positions.\n        \n                while (this.table[node].weight += 2, up = this.table[node].up) {\n                    while (this.table[node].weight > this.table[node + 1].weight) {\n                        node = this.slide(node);\n                    }\n        \n                    if (this.table[node].weight & 1) {\n                        node = up;\n                    } else {\n                        node = this.table[node].up;\n                    }\n                }\n        \n                /* Re-scale if necessary. */\n                if (this.max_weight) {\n                    if (this.table[this.root].weight >= this.max_weight) {\n                        this.scale(1);\n                    }\n                }\n            };\n        \n        //  scale all weights and re-balance the tree\n        \n        //  zero weight nodes are removed from the tree\n        //  by sliding them out the left of the rank list\n        \n            Huffman.prototype.scale = function(bits) {\n                var node = this.esc\n                    , weight, prev;\n        \n                //  work up the tree from the escape node\n                //  scaling weights by the value of bits\n        \n                while (++node <= this.root) {\n                    //  recompute the weight of internal nodes;\n                    //  slide down and out any unused ones\n        \n                    if (this.table[node].weight & 1) {\n                        if (weight = this.table[this.table[node].down].weight & ~1) {\n                            weight += this.table[this.table[node].down - 1].weight | 1;\n                        }\n        \n                        //  remove zero weight leaves by incrementing HuffEsc\n                        //  and removing them from the symbol map.  take care\n        \n                    } else if (!(weight = this.table[node].weight >> bits & ~1)) {\n                        if (this.map[this.table[node].symbol] = 0, this.esc++) {\n                            this.esc++;\n                        }\n                    }\n        \n                    // slide the scaled node back down over any\n                    // previous nodes with larger weights\n        \n                    this.table[node].weight = weight;\n                    prev = node;\n        \n                    while (weight < this.table[--prev].weight) {\n                        this.slide(prev);\n                    }\n                }\n        \n                // prepare a new escape node\n        \n                this.table[this.esc].down = 0;\n            };\n        \n        //  send the bits for an escaped symbol\n        \n            Huffman.prototype.sendid = function(symbol) {\n                var empty = 0\n                    , max;\n        \n                //  count the number of empty symbols\n                //  before the symbol in the table\n        \n                while (symbol--) {\n                    if (!this.map[symbol]) {\n                        empty++;\n                    }\n                }\n        \n                //  send LSB of this count first, using\n                //  as many bits as are required for\n                //  the maximum possible count\n        \n                if (max = this.size - Math.floor((this.root - this.esc) / 2) - 1) {\n                    do {\n                        this.writeBit(empty & 1);\n                        empty >>= 1;\n                    } while (max >>= 1);\n                }\n            };\n        \n        //  encode the next symbol\n        \n            Huffman.prototype.encode = function(symbol) {\n                var emit = 1\n                    , bit;\n                var up, idx, node;\n        \n                if (symbol < this.size) {\n                    node = this.map[symbol];\n                } else {\n                    console.assert(false);\n                    return;\n                }\n        \n                //  for a new symbol, direct the receiver to the escape node\n                //  but refuse input if table is already full.\n        \n                if (!(idx = node)) {\n                    if (!(idx = this.esc)) {\n                        return;\n                    }\n                }\n        \n                //  accumulate the code bits by\n                //  working up the tree from\n                //  the node to the root\n        \n                while (up = this.table[idx].up) {\n                    emit <<= 1;\n                    emit |= idx & 1;\n                    idx = up;\n                }\n        \n                //  send the code, root selector bit first\n        \n                while (bit = emit & 1, emit >>= 1) {\n                    this.writeBit(bit);\n                }\n        \n                //  send identification and incorporate\n                //  new symbols into the tree\n        \n                if (!node) {\n                    this.sendid(symbol);\n                    node = this.split(symbol);\n                }\n        \n                //  adjust and re-balance the tree\n        \n                this.increment(node);\n            };\n        \n        //  read the identification bits\n        //  for an escaped symbol\n        \n            Huffman.prototype.readid = function() {\n                var empty = 0\n                    , bit = 1\n                    , max, symbol;\n        \n                //  receive the symbol, LSB first, reading\n                //  only the number of bits necessary to\n                //  transmit the maximum possible symbol value\n        \n                if (max = this.size - Math.floor((this.root - this.esc) / 2) - 1) {\n                    do {\n                        empty |= this.readBit() ? bit : 0;\n                        bit <<= 1;\n                    } while (max >>= 1);\n                }\n        \n                //  the count is of unmapped symbols\n                //  in the table before the new one\n        \n                for (symbol = 0; symbol < this.size; symbol++) {\n                    if (!this.map[symbol]) {\n                        if (!empty--) {\n                            return symbol;\n                        }\n                    }\n                }\n        \n                //  oops!  our count is too big, either due\n                //  to a bit error, or a short node count\n                //  given to huff_init.\n        \n                console.assert(false);\n                return 0;\n            };\n        \n        //  decode the next symbol\n        \n            Huffman.prototype.decode = function() {\n                var node = this.root;\n                var symbol, down;\n        \n                //  work down the tree from the root\n                //  until reaching either a leaf\n                //  or the escape node.  A one\n                //  bit means go left, a zero\n                //  means go right.\n        \n                while (down = this.table[node].down) {\n                    if (this.readBit()) {\n                        node = down - 1; // the left child precedes the right child\n                    } else {\n                        node = down;\n                    }\n                }\n        \n                //  sent to the escape node???\n                //  refuse to add to a full tree\n        \n                if (node === this.esc) {\n                    if (this.esc) {\n                        symbol = this.readid();\n                        node = this.split(symbol);\n                    } else {\n                        console.assert(false);\n                        return 0;\n                    }\n                } else {\n                    symbol = this.table[node].symbol;\n                }\n        \n                //  increment weights and re-balance\n                //  the coding tree\n        \n                this.increment(node);\n                return symbol;\n            };\n        \n        // stand alone compressor, mostly for testing\n            Huffman.MAGIC = 'huff';\n            Huffman.compressFile = Util.compressFileHelper(Huffman.MAGIC, function(input, output, size, props) {\n                var bitstream = new BitStream(output);\n        \n                var alphabetSize = 256;\n                if (size < 0) {\n                    alphabetSize++;\n                }\n                var huff = new Huffman(257, alphabetSize, bitstream, 8191);\n                Util.compressWithModel(input, size, huff);\n                bitstream.flush();\n            });\n        \n        // stand alone decompresser, again for testing\n            Huffman.decompressFile = Util.decompressFileHelper(Huffman.MAGIC, function(input, output, size) {\n                var bitstream = new BitStream(input);\n        \n                var alphabetSize = 256;\n                if (size < 0) {\n                    alphabetSize++;\n                }\n                var huff = new Huffman(257, alphabetSize, bitstream, 8191);\n                Util.decompressWithModel(output, size, huff);\n            });\n        \n            return Huffman;\n        \n        }());\n        \n        \n        NoModel = (function(){\n            /** Simple \"lack of model\" -- just encode the bits directly.\n             *  Useful especially with sparse spaces or Huffman coders where there's\n             *  no obvious prediction to be made that will pay for itself.\n             */\n        \n            var NoModel = function(bitstream, size) {\n                this.bitstream = bitstream;\n                this.bits = Util.fls(size - 1);\n            };\n            NoModel.factory = function(bitstream) {\n                return function(size) { return new NoModel(bitstream, size); };\n            };\n            NoModel.prototype.encode = function(symbol) {\n                var i;\n                for (i = this.bits - 1; i >= 0; i--) {\n                    var b = (symbol >>> i) & 1;\n                    this.bitstream.writeBit(b);\n                }\n            };\n            NoModel.prototype.decode = function() {\n                var i, r = 0;\n                for (i = this.bits - 1; i >= 0; i--) {\n                    r <<= 1;\n                    if (this.bitstream.readBit()) r++;\n                }\n                return r;\n            };\n        \n            /** Brain-dead self-test. */\n            NoModel.MAGIC = 'nomo';\n            NoModel.compressFile = Util.compressFileHelper(NoModel.MAGIC, function(inStream, outStream, fileSize, props) {\n                var bitstream = new BitStream(outStream);\n                var model = new NoModel(bitstream, (fileSize < 0) ? 257 : 256);\n                Util.compressWithModel(inStream, fileSize, model);\n                bitstream.flush();\n            });\n            NoModel.decompressFile = Util.decompressFileHelper(NoModel.MAGIC, function(inStream, outStream, fileSize) {\n                var bitstream = new BitStream(inStream);\n                var model = new NoModel(bitstream, (fileSize < 0) ? 257 : 256);\n                Util.decompressWithModel(outStream, fileSize, model);\n            });\n        \n            return NoModel;\n        \n        \n        }());\n        \n        \n        FenwickModel = (function(){\n            /** Range coding model based on Fenwick trees for O(ln N) query/update. */\n        \n            /** We store two probabilities in a U32, so max prob is going to be 0xFFFF */\n            var DEFAULT_MAX_PROB = 0xFF00;\n            var DEFAULT_INCREMENT = 0x0100;\n        \n            var ESC_MASK = 0x0000FFFF\n                , ESC_SHIFT = 0;\n            var SYM_MASK = 0xFFFF0000\n                , SYM_SHIFT = 16;\n            var SCALE_MASK = 0xFFFEFFFE;\n        \n            var FenwickModel = function(coder, size, max_prob, increment) {\n                this.coder = coder;\n                this.numSyms = size + 1; // save space for an escape symbol\n                this.tree = Util.makeU32Buffer(this.numSyms * 2);\n                this.increment = (+increment) || DEFAULT_INCREMENT;\n                this.max_prob = (+max_prob) || DEFAULT_MAX_PROB;\n                // sanity-check to prevent overflow.\n                console.assert((this.max_prob + (this.increment - 1)) <= 0xFFFF);\n                console.assert(size <= 0xFFFF);\n                // record escape probability as 1.\n                var i;\n                for (i = 0; i < size; i++) {\n                    this.tree[this.numSyms + i] = // escape prob=1, sym prob = 0\n                        (1 << ESC_SHIFT) | (0 << SYM_SHIFT);\n                }\n                this.tree[this.numSyms + i] = // escape prob = 0, sym prob = 1\n                    (0 << ESC_SHIFT) | (this.increment << SYM_SHIFT);\n                this._sumTree();\n                // probability sums are in this.tree[1].  this.tree[0] is unused.\n            };\n            FenwickModel.factory = function(coder, max_prob, increment) {\n                return function(size) {\n                    return new FenwickModel(coder, size, max_prob, increment);\n                };\n            };\n            FenwickModel.prototype.clone = function() {\n                var newModel = new FenwickModel(this.coder, this.size\n                    , this.max_prob, this.increment);\n                var i;\n                for (i = 1; i < this.tree.length; i++) {\n                    newModel.tree[i] = this.tree[i];\n                }\n                return newModel;\n            };\n            FenwickModel.prototype.encode = function(symbol) {\n                var i = this.numSyms + symbol;\n                var sy_f = this.tree[i];\n                var mask = SYM_MASK\n                    , shift = SYM_SHIFT;\n                var update = (this.increment << SYM_SHIFT);\n        \n                if ((sy_f & SYM_MASK) === 0) { // escape!\n                    this.encode(this.numSyms - 1);\n                    mask = ESC_MASK;\n                    update -= (1 << ESC_SHIFT); // not going to escape no mo'\n                    shift = ESC_SHIFT;\n                } else if (symbol === (this.numSyms - 1) &&\n                    ((this.tree[1] & ESC_MASK) >>> ESC_SHIFT) === 1) {\n                    // this is the last escape, zero it out\n                    update = -this.tree[i];\n                }\n                // sum up the proper lt_f\n                var lt_f = 0;\n                while (i > 1) {\n                    var isRight = (i & 1);\n                    var parent = (i >>> 1);\n                    // if we're the right child, we need to\n                    // add the prob from the left child\n                    if (isRight) {\n                        lt_f += this.tree[2 * parent];\n                    }\n                    // update sums\n                    this.tree[i] += update; // increase sym / decrease esc\n                    i = parent;\n                }\n                var tot_f = this.tree[1];\n                this.tree[1] += update; // update prob in root\n                sy_f = (sy_f & mask) >>> shift;\n                lt_f = (lt_f & mask) >>> shift;\n                tot_f = (tot_f & mask) >>> shift;\n                this.coder.encodeFreq(sy_f, lt_f, tot_f);\n                // rescale?\n                if (((this.tree[1] & SYM_MASK) >>> SYM_SHIFT) >= this.max_prob) {\n                    this._rescale();\n                }\n            };\n            FenwickModel.prototype._decode = function(isEscape) {\n                var mask = SYM_MASK\n                    , shift = SYM_SHIFT;\n                var update = (this.increment << SYM_SHIFT);\n                if (isEscape) {\n                    mask = ESC_MASK;\n                    update -= (1 << ESC_SHIFT);\n                    shift = ESC_SHIFT;\n                }\n                var tot_f = (this.tree[1] & mask) >>> shift;\n                var prob = this.coder.decodeCulFreq(tot_f);\n                // travel down the tree looking for this\n                var i = 1\n                    , lt_f = 0;\n                while (i < this.numSyms) {\n                    this.tree[i] += update;\n                    // look at probability in left child.\n                    var leftProb = (this.tree[2 * i] & mask) >>> shift;\n                    i *= 2;\n                    if ((prob - lt_f) >= leftProb) {\n                        lt_f += leftProb;\n                        i++; // take the right child.\n                    }\n                }\n                var symbol = i - this.numSyms;\n                var sy_f = (this.tree[i] & mask) >>> shift;\n                this.tree[i] += update;\n                this.coder.decodeUpdate(sy_f, lt_f, tot_f);\n                // was this the last escape?\n                if (symbol === (this.numSyms - 1) &&\n                    ((this.tree[1] & ESC_MASK) >>> ESC_SHIFT) === 1) {\n                    update = -this.tree[i]; // zero it out\n                    while (i >= 1) {\n                        this.tree[i] += update;\n                        i = (i >>> 1); // parent\n                    }\n                }\n                // rescale?\n                if (((this.tree[1] & SYM_MASK) >>> SYM_SHIFT) >= this.max_prob) {\n                    this._rescale();\n                }\n                return symbol;\n            };\n            FenwickModel.prototype.decode = function() {\n                var symbol = this._decode(false); // not escape\n                if (symbol === (this.numSyms - 1)) {\n                    // this was an escape!\n                    symbol = this._decode(true); // an escape!\n                }\n                return symbol;\n            };\n            FenwickModel.prototype._rescale = function() {\n                var i, prob, noEscape = true;\n                // scale symbols (possible causing them to escape)\n                for (i = 0; i < this.numSyms - 1; i++) {\n                    prob = this.tree[this.numSyms + i];\n                    if ((prob & ESC_MASK) !== 0) {\n                        // this symbol escapes\n                        noEscape = false;\n                        continue;\n                    }\n                    prob = (prob & SCALE_MASK) >>> 1;\n                    if (prob === 0) {\n                        // this symbol newly escapes\n                        prob = (1 << ESC_SHIFT);\n                        noEscape = false;\n                    }\n                    this.tree[this.numSyms + i] = prob;\n                }\n                // scale the escape symbol\n                prob = this.tree[this.numSyms + i];\n                prob = (prob & SCALE_MASK) >>> 1;\n                // prob should be zero if there are no escaping symbols, otherwise\n                // it must be at least 1.\n                if (noEscape) {\n                    prob = 0;\n                } else if (prob === 0) {\n                    prob = (1 << SYM_SHIFT);\n                }\n                this.tree[this.numSyms + i] = prob;\n                // sum it all up afresh\n                this._sumTree();\n            };\n            FenwickModel.prototype._sumTree = function() {\n                var i;\n                // sum it all. (we know we won't overflow)\n                for (i = this.numSyms - 1; i > 0; i--) {\n                    this.tree[i] = this.tree[2 * i] + this.tree[2 * i + 1];\n                }\n            };\n        \n            FenwickModel.MAGIC = 'fenw';\n            /** Simple order-0 compressor, as self-test. */\n            FenwickModel.compressFile = Util.compressFileHelper(FenwickModel.MAGIC, function(inStream, outStream, fileSize, props, finalByte) {\n                var range = new RangeCoder(outStream);\n                range.encodeStart(finalByte, 1);\n                var model = new FenwickModel(range, (fileSize < 0) ? 257 : 256);\n                Util.compressWithModel(inStream, fileSize, model);\n                range.encodeFinish();\n            }, true);\n        \n            /** Simple order-0 decompresser, as self-test. */\n            FenwickModel.decompressFile = Util.decompressFileHelper(FenwickModel.MAGIC, function(inStream, outStream, fileSize) {\n                var range = new RangeCoder(inStream);\n                range.decodeStart(true /*already read the final byte*/ );\n                var model = new FenwickModel(range, (fileSize < 0) ? 257 : 256);\n                Util.decompressWithModel(outStream, fileSize, model);\n                range.decodeFinish();\n            });\n        \n            return FenwickModel;\n        \n        }());\n        \n        \n        DefSumModel = (function(){\n            /** Deferred-sum model, suitable for small ( ~ 256 ) ranges. */\n        // See http://cbloom.com/src/defsum.zip\n        //     http://cbloom.com/papers/context.pdf\n        \n            var LOG_PROB_TOTAL = 8;\n            var PROB_TOTAL = 1 << LOG_PROB_TOTAL;\n            var MAX_ESCAPE_COUNT = 40;\n        \n            var DefSumModel = function(coder, size, isDecoder) {\n                var i;\n                console.assert(size < 300); // not meant for sparse\n                var ESCAPE = this.numSyms = size;\n                this.coder = coder;\n                this.prob = Util.makeU16Buffer(size + 2); /* size + ESC + 1 */\n                this.escape = Util.makeU16Buffer(size + 1); /* size + 1*/\n                this.update = Util.makeU16Buffer(size + 1); /* size + ESC */\n                this.prob[ESCAPE + 1] = PROB_TOTAL;\n                for (i = 0; i <= this.numSyms; i++) {\n                    this.escape[i] = i;\n                }\n                this.updateCount = 0;\n                this.updateThresh = PROB_TOTAL - Math.floor(PROB_TOTAL / 2);\n                if (!isDecoder) {\n                    return;\n                }\n                // extra tables for fast decoding\n                this.probToSym = Util.makeU16Buffer(PROB_TOTAL);\n                this.escProbToSym = Util.makeU16Buffer(this.numSyms);\n                for (i = 0; i < PROB_TOTAL; i++) {\n                    this.probToSym[i] = ESCAPE;\n                }\n                for (i = 0; i < this.numSyms; i++) {\n                    this.escProbToSym[i] = i;\n                }\n            };\n            DefSumModel.factory = function(coder, isDecoder) {\n                return function(size) {\n                    return new DefSumModel(coder, size, isDecoder);\n                };\n            };\n            DefSumModel.prototype._update = function(symbol, isDecoder) {\n                if (symbol === this.numSyms) {\n                    // some special cases for the escape character\n                    if (this.update[symbol] >= MAX_ESCAPE_COUNT) {\n                        return;\n                    } // hard limit\n                    // don't let an escape character trigger an update, because then the\n                    // escaped character might find itself unescaped after the tables have\n                    // been updated!\n                    if (this.updateCount >= (this.updateThresh - 1)) {\n                        return;\n                    }\n                }\n                this.update[symbol]++;\n                this.updateCount++;\n                // is it time to transfer the updated probabilities?\n                if (this.updateCount < this.updateThresh) {\n                    return; //defer update\n                }\n                var cumProb, cumEscProb, odd, i, j, k;\n                this.escape[0] = this.prob[0] = cumProb = cumEscProb = odd = 0;\n                for (i = 0; i < this.numSyms + 1; i++) {\n                    var newProb = ((this.prob[i + 1] - this.prob[i]) >>> 1) + this.update[i];\n                    if (newProb) {\n                        // live 'un\n                        this.prob[i] = cumProb;\n                        cumProb += newProb;\n                        if (newProb & 1) {\n                            odd++;\n                        }\n                        this.escape[i] = cumEscProb;\n                    } else {\n                        // this symbol will escape\n                        this.prob[i] = cumProb;\n                        this.escape[i] = cumEscProb;\n                        cumEscProb++;\n                    }\n                }\n                this.prob[i] = cumProb;\n                console.assert(cumProb === PROB_TOTAL);\n                /* how many updates will be required after current probs are halved? */\n                this.updateThresh = PROB_TOTAL - Math.floor((cumProb - odd) / 2);\n                /* reset the update table */\n                for (i = 0; i < (this.numSyms + 1); i++) {\n                    this.update[i] = 0;\n                }\n                this.update[this.numSyms] = 1; // ensure that escape never goes away\n                this.updateCount = 1;\n                /* compute decode table, if this is a decoder */\n                if (!isDecoder) {\n                    return;\n                }\n                for (i = 0, j = 0, k = 0; i < (this.numSyms + 1); i++) {\n                    var probLimit = this.prob[i + 1];\n                    for (; j < probLimit; j++) {\n                        this.probToSym[j] = i;\n                    }\n                    var escProbLimit = this.escape[i + 1];\n                    for (; k < escProbLimit; k++) {\n                        this.escProbToSym[k] = i;\n                    }\n                }\n            };\n            DefSumModel.prototype.encode = function(symbol) {\n                var lt_f = this.prob[symbol];\n                var sy_f = this.prob[symbol + 1] - lt_f;\n                console.assert(this.prob[this.numSyms + 1] === PROB_TOTAL);\n                if (sy_f) {\n                    this.coder.encodeShift(sy_f, lt_f, LOG_PROB_TOTAL);\n                    return this._update(symbol);\n                }\n                // escape!\n                console.assert(symbol !== this.numSyms); // catch infinite recursion\n                this.encode(this.numSyms); // guaranteed non-zero probability\n                // code symbol as literal, taking advantage of reduced escape range.\n                lt_f = this.escape[symbol];\n                sy_f = this.escape[symbol + 1] - lt_f;\n                var tot_f = this.escape[this.numSyms];\n                this.coder.encodeFreq(sy_f, lt_f, tot_f);\n                return this._update(symbol);\n            };\n            DefSumModel.prototype.decode = function() {\n                var prob = this.coder.decodeCulShift(LOG_PROB_TOTAL);\n                var symbol = this.probToSym[prob];\n                var lt_f = this.prob[symbol];\n                var sy_f = this.prob[symbol + 1] - lt_f;\n                this.coder.decodeUpdate(sy_f, lt_f, PROB_TOTAL);\n                this._update(symbol, true);\n                if (symbol !== this.numSyms) {\n                    return symbol;\n                }\n                // escape!\n                var tot_f = this.escape[this.numSyms];\n                prob = this.coder.decodeCulFreq(tot_f);\n                symbol = this.escProbToSym[prob];\n                lt_f = this.escape[symbol];\n                sy_f = this.escape[symbol + 1] - lt_f;\n                this.coder.decodeUpdate(sy_f, lt_f, tot_f);\n                this._update(symbol, true);\n                return symbol;\n            };\n        \n            DefSumModel.MAGIC = 'dfsm';\n            /** Simple order-0 compressor, as self-test. */\n            DefSumModel.compressFile = Util.compressFileHelper(DefSumModel.MAGIC, function(inStream, outStream, fileSize, props, finalByte) {\n                var range = new RangeCoder(outStream);\n                range.encodeStart(finalByte, 1);\n                var model = new DefSumModel(range, (fileSize < 0) ? 257 : 256);\n                Util.compressWithModel(inStream, fileSize, model);\n                range.encodeFinish();\n            }, true);\n            /** Simple order-0 decompresser, as self-test. */\n            DefSumModel.decompressFile = Util.decompressFileHelper(DefSumModel.MAGIC, function(inStream, outStream, fileSize) {\n                var range = new RangeCoder(inStream);\n                range.decodeStart(true /*already read the final byte*/ );\n                var model = new DefSumModel(range, (fileSize < 0) ? 257 : 256, true);\n                Util.decompressWithModel(outStream, fileSize, model);\n                range.decodeFinish();\n            });\n        \n            return DefSumModel;\n        \n        }());\n        \n        \n        Context1Model = (function(){\n            /** A simple context-1 model. */\n        \n            var Context1Model = function(modelFactory, contextSize, alphabetSize) {\n                var i;\n                this.literalModel = [];\n                // even if there's an EOF symbol, we don't need a context for it!\n                for (i = 0; i < contextSize; i++) {\n                    this.literalModel[i] = modelFactory(alphabetSize);\n                }\n            };\n            Context1Model.prototype.encode = function(ch, context) {\n                this.literalModel[context].encode(ch);\n            };\n            Context1Model.prototype.decode = function(context) {\n                return this.literalModel[context].decode();\n            };\n        \n            /** Simple self-test. */\n            Context1Model.MAGIC = 'ctx1';\n            Context1Model.compressFile = Util.compressFileHelper(Context1Model.MAGIC, function(inStream, outStream, fileSize, props) {\n                var bitstream = new BitStream(outStream);\n                var alphabetSize = 256;\n                if (fileSize < 0) { alphabetSize++; }\n                var coder = Huffman.factory(bitstream, 8191);\n                var model = new Context1Model(coder, 256, alphabetSize);\n                var lastchar = 0x20;\n                var modelp = {\n                    encode: function(symbol) {\n                        model.encode(symbol, lastchar);\n                        lastchar = symbol;\n                    }\n                };\n                Util.compressWithModel(inStream, fileSize, modelp);\n                bitstream.flush();\n            });\n            Context1Model.decompressFile = Util.decompressFileHelper(Context1Model.MAGIC, function(inStream, outStream, fileSize) {\n                var bitstream = new BitStream(inStream);\n                var alphabetSize = 256;\n                if (fileSize < 0) { alphabetSize++; }\n                var coder = Huffman.factory(bitstream, 8191);\n                var model = new Context1Model(coder, 256, alphabetSize);\n                var lastchar = 0x20;\n                var modelp = {\n                    decode: function() {\n                        var symbol = model.decode(lastchar);\n                        lastchar = symbol;\n                        return symbol;\n                    }\n                };\n                Util.decompressWithModel(outStream, fileSize, modelp);\n            });\n        \n            return Context1Model;\n        \n        }());\n        \n        \n        Lzp3 = (function(){\n            /* Implementation of LZP3(ish), with an adaptive Huffman code or a range\n             * coder (instead of LZP3's original static Huffman code).\n             * See: http://www.cbloom.com/papers/lzp.pdf\n             */\n        \n        \n            var Lzp3 = Object.create(null);\n            Lzp3.MAGIC = 'lzp3';\n        \n        // use Huffman coder (fast) or else use range coder (slow)\n            var USE_HUFFMAN_CODE = false;\n        // use deferred-sum model, which is supposed to be faster (but compresses worse)\n            var USE_DEFSUM = false;\n        // when to give up attempting to model the length\n            var LENGTH_MODEL_CUTOFF = 256;\n            var MODEL_MAX_PROB = 0xFF00;\n            var MODEL_INCREMENT = 0x100;\n        \n        // Constants was used for compress/decompress function.\n            var CTXT4_TABLE_SIZE = 1 << 16;\n            var CTXT3_TABLE_SIZE = 1 << 12;\n            var CTXT2_TABLE_SIZE = 1 << 16;\n            var CONTEXT_LEN = 4;\n            var LOG_WINDOW_SIZE = 20;\n            var WINDOW_SIZE = 1 << LOG_WINDOW_SIZE;\n            var MAX_MATCH_LEN = WINDOW_SIZE - 1;\n            var MATCH_LEN_CONTEXTS = 16;\n        \n            var MAX32 = 0xFFFFFFFF;\n            var MAX24 = 0x00FFFFFF;\n            var MAX16 = 0x0000FFFF;\n            var MAX8 = 0x000000FF;\n        \n        \n            var Window = function(maxSize) {\n                this.buffer = Util.makeU8Buffer(Math.min(maxSize + 4, WINDOW_SIZE));\n                this.pos = 0;\n                // context-4 hash table.\n                this.ctxt4 = Util.makeU32Buffer(CTXT4_TABLE_SIZE);\n                // context-3 hash table\n                this.ctxt3 = Util.makeU32Buffer(CTXT3_TABLE_SIZE);\n                // context-2 table (not really a hash any more)\n                this.ctxt2 = Util.makeU32Buffer(CTXT2_TABLE_SIZE);\n                // initial context\n                this.put(0x63);\n                this.put(0x53);\n                this.put(0x61);\n                this.put(0x20);\n            };\n            Window.prototype.put = function(_byte) {\n                this.buffer[this.pos++] = _byte;\n                if (this.pos >= WINDOW_SIZE) { this.pos = 0; }\n                return _byte;\n            };\n            Window.prototype.get = function(pos) {\n                return this.buffer[pos & (WINDOW_SIZE - 1)];\n            };\n            Window.prototype.context = function(pos, n) {\n                var c = 0\n                    , i;\n                pos = (pos - n) & (WINDOW_SIZE - 1);\n                for (i = 0; i < n; i++) {\n                    c = (c << 8) | this.buffer[pos++];\n                    if (pos >= WINDOW_SIZE) { pos = 0; }\n                }\n                return c;\n            };\n        // if matchLen !== 0, update the index; otherwise get index value.\n            Window.prototype.getIndex = function(s, matchLen) {\n                var c = this.context(s, 4);\n                // compute context hashes\n                var h4 = ((c >>> 15) ^ c) & (CTXT4_TABLE_SIZE - 1);\n                var h3 = ((c >>> 11) ^ c) & (CTXT3_TABLE_SIZE - 1);\n                var h2 = c & MAX16;\n                // check order-4 context\n                var p = 0\n                    , checkc;\n                // only do context confirmation if matchLen==0 (that is, if we're not just\n                // doing an update)\n                if (matchLen === 0) {\n                    p = this.ctxt4[h4];\n                    if (p !== 0 && c !== this.context(p - 1, 4)) {\n                        p = 0; // context confirmation failed\n                    }\n                    if (p === 0) {\n                        // check order-3 context\n                        p = this.ctxt3[h3];\n                        if (p !== 0 && (c & MAX24) !== this.context(p - 1, 3)) {\n                            p = 0; // context confirmation failed\n                        }\n                        if (p === 0) {\n                            // check order-2 context\n                            p = this.ctxt2[h2];\n                            if (p !== 0 && (c && MAX16) !== this.context(p - 1, 2)) {\n                                p = 0; // context confirmation failed\n                            }\n                        }\n                    }\n                }\n                // update context index\n                if (matchLen) { matchLen--; }\n                this.ctxt4[h4] = this.ctxt3[h3] = this.ctxt2[h2] =\n                    (s | (matchLen << LOG_WINDOW_SIZE)) + 1;\n                // return lookup result.\n                return p;\n            };\n        \n            /**\n             * Compress using modified LZP3 algorithm.  Instead of using static\n             * Huffman coding, we use an adaptive Huffman code or range encoding.\n             */\n            Lzp3.compressFile = Util.compressFileHelper(Lzp3.MAGIC, function(inStream, outStream, fileSize, props) {\n                // sliding window & hash table\n                var window = new Window((fileSize >= 0) ? fileSize : WINDOW_SIZE);\n        \n                var coderFactory, sparseCoderFactory, flush;\n        \n                if (USE_HUFFMAN_CODE) {\n                    // Huffman contexts\n                    outStream.writeByte(0x80); // mark that this is Huffman coded.\n                    var bitstream = new BitStream(outStream);\n                    flush = bitstream.flush.bind(bitstream);\n                    coderFactory = Huffman.factory(bitstream, MAX16);\n                    sparseCoderFactory = NoModel.factory(bitstream);\n        \n                } else { // range encoder\n                    var range = new RangeCoder(outStream);\n                    range.encodeStart(0x00, 0); // 0x00 == range encoded\n        \n                    coderFactory = FenwickModel.factory(range, MODEL_MAX_PROB, MODEL_INCREMENT);\n                    if (USE_DEFSUM) {\n                        coderFactory = DefSumModel.factory(range, false /* encoder */ );\n                    }\n                    // switch sparseCoderFactory to a NoModel when size > cutoff\n                    var noCoderFactory = NoModel.factory(range);\n                    sparseCoderFactory = function(size) {\n                        if (size > LENGTH_MODEL_CUTOFF) {\n                            return noCoderFactory(size);\n                        }\n                        return coderFactory(size);\n                    };\n                    flush = function() { range.encodeFinish(); };\n                }\n        \n                var huffLiteral = new Context1Model(coderFactory, 256\n                    , (fileSize < 0) ? 257 : 256);\n                var huffLen = []\n                    , i;\n                for (i = 0; i < MATCH_LEN_CONTEXTS; i++) {\n                    huffLen[i] = new LogDistanceModel(MAX_MATCH_LEN + 1, 1\n                        , coderFactory, sparseCoderFactory);\n                }\n        \n                var inSize = 0\n                    , s, matchContext = 0;\n                while (inSize !== fileSize) {\n                    var ch = inStream.readByte();\n                    s = window.pos;\n                    var p = window.getIndex(s, 0);\n                    if (p !== 0) {\n                        // great, a match! how long is it?\n                        p--; // p=0 is used for 'not here'. p=1 really means WINDOW_SIZE\n                        var prevMatchLen = (p >>> LOG_WINDOW_SIZE) + 1;\n                        var matchLen = 0;\n                        while (window.get(p + matchLen) === ch && matchLen < MAX_MATCH_LEN) {\n                            matchLen++;\n                            window.put(ch);\n                            ch = inStream.readByte();\n                        }\n                        // code match length; match len = 0 means \"literal\"\n                        // use \"extra state\" -1 to mean \"same as previous match length\"\n                        if (prevMatchLen === matchLen) {\n                            huffLen[matchContext & (MATCH_LEN_CONTEXTS - 1)].encode(-1);\n                        } else {\n                            huffLen[matchContext & (MATCH_LEN_CONTEXTS - 1)].encode(matchLen);\n                        }\n                        // update hash with this match\n                        window.getIndex(s, matchLen);\n                        inSize += matchLen;\n                        matchContext <<= 1;\n                        if (matchLen > 0) { matchContext |= 1; }\n                        // XXX: LZMA uses a special \"delta match\" context here if matchLen==0\n                        // XXX: it also uses the offset as context for the length (or vice-versa)\n                    }\n                    // always encode a literal after a match\n                    var context1 = window.get(window.pos - 1);\n                    if (ch === Stream.EOF) {\n                        if (fileSize < 0) {\n                            huffLiteral.encode(256, context1);\n                        }\n                        break;\n                    }\n                    huffLiteral.encode(ch, context1);\n                    window.put(ch);\n                    inSize++;\n                }\n                if (flush) flush();\n            });\n        \n            /**\n             * Decompress using modified LZP3 algorithm.\n             */\n            Lzp3.decompressFile = Util.decompressFileHelper(Lzp3.MAGIC, function(inStream, outStream, fileSize) {\n                var flags = inStream.readByte();\n                var use_huffman_code = !!(flags & 0x80);\n        \n                // sliding window & hash table\n                var window = new Window((fileSize >= 0) ? fileSize : WINDOW_SIZE);\n        \n                var coderFactory, sparseCoderFactory, finish;\n        \n                if (use_huffman_code) {\n                    // Huffman contexts\n                    var bitstream = new BitStream(inStream);\n                    coderFactory = Huffman.factory(bitstream, MAX16);\n                    sparseCoderFactory = NoModel.factory(bitstream);\n                } else { // range encoder\n                    var range = new RangeCoder(inStream);\n                    range.decodeStart(true /* skip initial read */ );\n                    coderFactory = FenwickModel.factory(range, MODEL_MAX_PROB, MODEL_INCREMENT);\n                    if (USE_DEFSUM) {\n                        coderFactory = DefSumModel.factory(range, true /* decoder */ );\n                    }\n                    // switch sparseCoderFactory to a NoModel when size > cutoff\n                    var noCoderFactory = NoModel.factory(range);\n                    sparseCoderFactory = function(size) {\n                        if (size > LENGTH_MODEL_CUTOFF) {\n                            return noCoderFactory(size);\n                        }\n                        return coderFactory(size);\n                    };\n                    finish = function() { range.decodeFinish(); };\n                }\n        \n                var huffLiteral = new Context1Model(coderFactory, 256\n                    , (fileSize < 0) ? 257 : 256);\n                var huffLen = []\n                    , i;\n                for (i = 0; i < MATCH_LEN_CONTEXTS; i++) {\n                    huffLen[i] = new LogDistanceModel(MAX_MATCH_LEN + 1, 1\n                        , coderFactory, sparseCoderFactory);\n                }\n        \n                var s, ch, outSize = 0\n                    , matchContext = 0;\n                while (outSize !== fileSize) {\n                    s = window.pos;\n                    var p = window.getIndex(s, 0);\n                    if (p !== 0) {\n                        p--; // p=0 is used for 'not here'. p=1 really means WINDOW_SIZE\n                        var prevMatchLen = (p >>> LOG_WINDOW_SIZE) + 1;\n                        var matchLen = huffLen[matchContext & (MATCH_LEN_CONTEXTS - 1)].decode();\n                        if (matchLen < 0) { matchLen = prevMatchLen; }\n                        // copy characters!\n                        for (i = 0; i < matchLen; i++) {\n                            ch = window.get(p + i);\n                            outStream.writeByte(window.put(ch));\n                        }\n                        window.getIndex(s, matchLen);\n                        outSize += matchLen;\n                        matchContext <<= 1;\n                        if (matchLen > 0) matchContext |= 1;\n                    }\n                    // literal always follows match (or failed match)\n                    if (outSize === fileSize) {\n                        break; // EOF\n                    }\n                    var context1 = window.get(window.pos - 1);\n                    ch = huffLiteral.decode(context1);\n                    if (ch === 256) {\n                        break; // EOF\n                    }\n                    outStream.writeByte(window.put(ch));\n                    outSize++;\n                }\n                if (finish) finish();\n            });\n        \n        \n            return Lzp3;\n        }());\n        \n        if(mode === \"COMPRESS_OBJECT\") {\n        \n            var json_str = JSON.stringify(uint8a_or_obj, null, 0);\n            var ui8a = new TextEncoder(\"utf-8\").encode(json_str);\n            var compressed = Lzp3.compressFile(ui8a);\n            \n            return Uint8Array.from(compressed);\n            \n        }else if(mode === \"DECOMPRESS_UINT8A\") {\n          \n             var decompressed = Lzp3.decompressFile(uint8a_or_obj);\n             var ui8a =  Uint8Array.from(decompressed);\n             var json_str = new TextDecoder().decode(ui8a);\n             \n            return JSON.parse(json_str);\n            \n        }else {\n        \n            return null;\n        }\n    }",e.exports={LZP3:function t(n){var r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"COMPRESS_OBJECT",a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:function(){},i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;Boolean(i)?i.exec(window.lzp3_json_process_function_string,[n,r]).catch(function(e){return"Pool terminated"===e?t(n,r,a,i):new Function(window.lzp3_json_process_function_string)()(n,r)}).then(function(e){a(e)}).then(function(){i.terminate()}).timeout(15e3):new Function(window.lzp3_json_process_function_string)()(n,r).then(function(e){a(e)})}}},433:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("g",{fill:"#66757F"},a.createElement("path",{d:"M19.78 21.345l-6.341-6.342-.389 4.38 2.35 2.351z"}),a.createElement("path",{d:"M15.4 22.233a.507.507 0 01-.354-.146l-2.351-2.351a.501.501 0 01-.145-.397l.389-4.38a.5.5 0 01.851-.309l6.341 6.342a.5.5 0 01-.31.851l-4.379.389-.042.001zm-1.832-3.039l2.021 2.021 3.081-.273-4.828-4.828-.274 3.08z"})),a.createElement("path",{fill:"#8899A6",d:"M31 32h-3c0-3.314-2.63-6-5.875-6-3.244 0-5.875 2.686-5.875 6H8.73a2 2 0 00-4 0 2 2 0 000 4H31a2 2 0 000-4z"}),a.createElement("path",{fill:"#8899A6",d:"M20 10v4a7 7 0 110 14h-8.485c2.018 2.443 5.069 4 8.485 4 6.075 0 11-4.925 11-11s-4.925-11-11-11z"}),a.createElement("path",{fill:"#67757F",d:"M16.414 30.414a2 2 0 01-2.828 0l-9.899-9.9a2 2 0 112.829-2.828l9.899 9.9a2 2 0 01-.001 2.828zm-7.225-1.786a1 1 0 11.278 1.98l-5.942.834a1 1 0 11-.277-1.981l5.941-.833z"}),a.createElement("path",{fill:"#66757F",d:"M27.341 2.98l4.461 4.461-3.806 3.807-4.461-4.461z"}),a.createElement("path",{fill:"#AAB8C2",d:"M34.037 7.083a2.12 2.12 0 01-2.997 0l-3.339-3.34A2.12 2.12 0 0130.696.747l3.342 3.34a2.12 2.12 0 01-.001 2.996zm-14.56 15.026l-6.802-6.803a1.003 1.003 0 010-1.414l9.858-9.858a1.003 1.003 0 011.414 0l6.801 6.803a1.003 1.003 0 010 1.414l-9.858 9.858a1.001 1.001 0 01-1.413 0z"}),a.createElement("path",{fill:"#E1E8ED",d:"M13.766 12.8l1.638-1.637 8.216 8.216-1.638 1.637z"}))}},446:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#D99E82",d:"M35.222 33.598c-.647-2.101-1.705-6.059-2.325-7.566-.501-1.216-.969-2.438-1.544-3.014-.575-.575-1.553-.53-2.143.058 0 0-2.469 1.675-3.354 2.783-1.108.882-2.785 3.357-2.785 3.357-.59.59-.635 1.567-.06 2.143.576.575 1.798 1.043 3.015 1.544 1.506.62 5.465 1.676 7.566 2.325.359.11 1.74-1.271 1.63-1.63z"}),a.createElement("path",{fill:"#EA596E",d:"M13.643 5.308a2.946 2.946 0 010 4.167l-4.167 4.168a2.948 2.948 0 01-4.167 0L1.141 9.475a2.948 2.948 0 010-4.167l4.167-4.167a2.946 2.946 0 014.167 0l4.168 4.167z"}),a.createElement("path",{fill:"#FFCC4D",d:"M31.353 23.018l-4.17 4.17-4.163 4.165L7.392 15.726l8.335-8.334 15.626 15.626z"}),a.createElement("path",{fill:"#292F33",d:"M32.078 34.763s2.709 1.489 3.441.757c.732-.732-.765-3.435-.765-3.435s-2.566.048-2.676 2.678z"}),a.createElement("path",{fill:"#CCD6DD",d:"M2.183 10.517l8.335-8.335 5.208 5.209-8.334 8.335z"}),a.createElement("path",{fill:"#99AAB5",d:"M3.225 11.558l8.334-8.334 1.042 1.042L4.267 12.6zm2.083 2.086l8.335-8.335 1.042 1.042-8.335 8.334z"}))}},447:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#292F33",d:"M3.651 29.852L29.926 3.576c.391-.391 2.888 2.107 2.497 2.497L6.148 32.349c-.39.391-2.888-2.107-2.497-2.497z"}),a.createElement("path",{fill:"#66757F",d:"M30.442 4.051L4.146 30.347l.883.883L31.325 4.934z"}),a.createElement("path",{fill:"#E1E8ED",d:"M34.546 2.537l-.412-.412-.671-.671a.967.967 0 00-.255-.169.988.988 0 00-1.159.169l-2.102 2.102.495.495.883.883 1.119 1.119 2.102-2.102a.999.999 0 000-1.414zM5.029 31.23l-.883-.883-.495-.495-2.209 2.208a.988.988 0 00-.169 1.159c.046.09.094.18.169.255l.671.671.412.412a.999.999 0 001.414 0l2.208-2.208-1.118-1.119z"}),a.createElement("path",{fill:"#F5F8FA",d:"M31.325 4.934l2.809-2.809-.671-.671a.967.967 0 00-.255-.169l-2.767 2.767.884.882zM4.146 30.347L1.273 33.22c.046.09.094.18.169.255l.671.671 2.916-2.916-.883-.883z"}),a.createElement("path",{d:"M28.897 14.913l1.542-.571.6-2.2a.667.667 0 011.287 0l.6 2.2 1.542.571a.665.665 0 010 1.25l-1.534.568-.605 2.415a.667.667 0 01-1.293 0l-.605-2.415-1.534-.568a.665.665 0 010-1.25M11.961 5.285l2.61-.966.966-2.61a1.103 1.103 0 012.07 0l.966 2.61 2.609.966a1.103 1.103 0 010 2.07l-2.609.966-.966 2.61a1.105 1.105 0 01-2.07 0l-.966-2.61-2.61-.966a1.104 1.104 0 010-2.07M24.13 20.772l1.383-.512.512-1.382a.585.585 0 011.096 0l.512 1.382 1.382.512a.584.584 0 010 1.096l-1.382.512-.512 1.382a.585.585 0 01-1.096 0l-.512-1.382-1.383-.512a.585.585 0 010-1.096",fill:"#FFAC33"}))}},448:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("circle",{fill:"#FFCC4D",cx:18,cy:18,r:18}),a.createElement("path",{fill:"#664500",d:"M27.335 22.629a.501.501 0 00-.635-.029c-.039.029-3.922 2.9-8.7 2.9-4.766 0-8.662-2.871-8.7-2.9a.5.5 0 00-.729.657C8.7 23.472 11.788 28.5 18 28.5s9.301-5.028 9.429-5.243a.499.499 0 00-.094-.628zM26 19a.999.999 0 01-.948-.684C24.849 17.717 24.033 16 23 16c-1.062 0-1.889 1.827-2.052 2.316a1 1 0 11-1.897-.633C19.177 17.307 20.355 14 23 14s3.823 3.307 3.948 3.684A1 1 0 0126 19zm-10 0c-.419 0-.809-.265-.949-.684C14.848 17.717 14.034 16 13 16c-1.062 0-1.888 1.827-2.051 2.316a.999.999 0 11-1.897-.633C9.177 17.307 10.355 14 13 14s3.823 3.307 3.949 3.684A1 1 0 0116 19z"}),a.createElement("path",{fill:"#FFAC33",d:"M33.175 8.316s-9.042.161-15.175.161c-3.905 0-15.206-.118-15.206-.118l-.521.876c3.043 1.856 9.064 2.917 15.727 2.917 6.596 0 12.576-1.04 15.652-2.86l.078-.047s-.374-.664-.555-.929z"}),a.createElement("path",{fill:"#5DADEC",d:"M23.777.345a70.63 70.63 0 00-3.773-.19A82.683 82.683 0 0018 .129c-.672 0-1.336.01-1.993.025a70.732 70.732 0 00-3.777.19C5.34.88.169 2.451.169 5.287c0 3.588 8.264 5.771 17.831 5.771s17.831-2.183 17.831-5.771c0-2.835-5.168-4.405-12.054-4.942zM18 7.383c-6.861 0-12.91-.833-12.91-2.736 0-.536.494-1.023 1.339-1.449 1.153-.581 2.978-1.044 5.189-1.349 1.911-.262 4.098-.41 6.382-.41 2.291 0 4.485.148 6.4.413 2.242.31 4.086.783 5.232 1.377.807.418 1.278.894 1.278 1.418 0 1.903-6.049 2.736-12.91 2.736z"}),a.createElement("path",{fill:"#3B94D9",d:"M24.4 1.853c2.242.31 4.086.783 5.232 1.377l.062.017c-2.285-1.674-4.57-2.56-5.917-2.902a70.63 70.63 0 00-3.773-.19l.018.007L24.4 1.853zM6.429 3.199c1.153-.581 2.978-1.044 5.189-1.349L15.984.162l.023-.008a70.732 70.732 0 00-3.777.19c-1.347.342-3.633 1.227-5.919 2.902l.118-.047z"}),a.createElement("path",{fill:"#FFCC4D",d:"M28.472 3.375c-.66-.443-1.346-.91-2.001-1.26A17.907 17.907 0 0018 0c-2.929 0-5.695.7-8.14 1.941-1.089.553-1.881.999-2.17 1.434h20.782z"}))}},449:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#BE1931",d:"M2.067 11.319C2.067 2.521 14.251-.74 18 9.445 21.749-.741 33.933 2.52 33.933 11.319 33.933 20.879 18 33 18 33S2.067 20.879 2.067 11.319z"}))}},453:function(e,t,n){"use strict";var i=n(454);function l(){try{window._sound_object_music.stop()}catch(e){}}window._sound_object_music=null,e.exports={play_sound:function(e,t,n,r,a){r=r||1,n="/src/sounds/"+e+"/"+t+"/"+n+".mp3";if(a){l();try{window._sound_object_music=new i.Howl({src:[n],volume:r}),window._sound_object_music.play()}catch(e){}}else new i.Howl({src:[n],volume:r}).play()},stop_sound:l}},455:function(e,t,n){"use strict";e.exports={update_meta_title:function(e){for(var t=document.getElementById("meta-title");t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},465:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));t.default=function(e){return a.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 36 36"},e),a.createElement("path",{fill:"#FFAC33",d:"M2.72 5.464h3.53v2.679H4.464c-1.786 0-1.786.893-1.786 1.786v7.387c0 1.359 1.289 1.542 1.289 1.542H6.25v2.679H2.72A2.72 2.72 0 010 18.818V8.183a2.72 2.72 0 012.72-2.719z"}),a.createElement("path",{fill:"#FFAC33",d:"M5.357 5.464h15.179V24c0 1.1-.9 2-2 2H7.357c-1.1 0-2-.9-2-2V5.464z"}),a.createElement("path",{fill:"#F4900C",d:"M8.482 23.321a.893.893 0 00.893-.893v-9.821a.893.893 0 10-1.786 0v9.821c0 .494.4.893.893.893zm4.464 0a.893.893 0 00.893-.893v-9.821a.893.893 0 10-1.786 0v9.821c.001.494.4.893.893.893zM5.357 8.575V5.464h15.179v4.878a2.703 2.703 0 01-.933.175 2.718 2.718 0 01-2.516-1.694 1.345 1.345 0 01-1.994-.246 2.71 2.71 0 01-2.288 1.26 2.705 2.705 0 01-2.159-1.083 1.698 1.698 0 01-1.58 1.083 1.696 1.696 0 01-1.488-.893c-.27.132-.57.213-.892.213-.882 0-1.329-.582-1.329-.582z"}),a.createElement("path",{fill:"#E1E8ED",d:"M8.036 1h11.607c1.786 0 2.679.893 2.679 2.679v2.76a2.72 2.72 0 01-5.235 1.026 1.35 1.35 0 01-.883.334c-.46 0-.865-.23-1.111-.58a2.712 2.712 0 01-2.288 1.259 2.705 2.705 0 01-2.159-1.083 1.698 1.698 0 01-1.58 1.083c-.62 0-1.15-.34-1.447-.837a1.339 1.339 0 01-2.262-.967V3.679C5.357 1.893 6.25 1 8.036 1z"}),a.createElement("path",{d:"M30.495 6.514a1 1 0 01-.707-1.708l3.552-3.55a1 1 0 011.414 1.415l-3.552 3.55a.993.993 0 01-.707.293zm-4.164-1.697a1 1 0 01-.944-1.331l.97-2.773a1 1 0 011.888.66l-.97 2.773a1 1 0 01-.944.671zm6.143 5.774a1.001 1.001 0 01-.333-1.943l2.494-.881a1 1 0 11.666 1.886l-2.494.881a1.001 1.001 0 01-.333.057z",fill:"#FA743E"}),a.createElement("path",{fill:"#FFAC33",d:"M33.28 15.464h-3.53v2.679h1.786c1.786 0 1.786.893 1.786 1.786v7.387c0 1.359-1.289 1.542-1.289 1.542H29.75v2.679h3.53A2.72 2.72 0 0036 28.818V18.183a2.72 2.72 0 00-2.72-2.719z"}),a.createElement("path",{fill:"#FFCC4D",d:"M30.643 15.464H15.464V34c0 1.1.9 2 2 2h11.179c1.1 0 2-.9 2-2V15.464z"}),a.createElement("path",{fill:"#F4900C",d:"M18.589 33.321a.893.893 0 01-.893-.893v-9.821a.893.893 0 011.786 0v9.821c0 .494-.4.893-.893.893zm8.929 0a.893.893 0 01-.893-.893v-9.821a.893.893 0 111.786 0v9.821c0 .494-.4.893-.893.893zm-4.464 0a.893.893 0 01-.893-.893v-9.821a.893.893 0 111.786 0v9.821a.893.893 0 01-.893.893z"}),a.createElement("path",{fill:"#FFAC33",d:"M30.643 18.575v-3.111H15.464v4.878c.292.107.604.175.933.175a2.718 2.718 0 002.516-1.694 1.345 1.345 0 001.994-.246 2.71 2.71 0 002.288 1.26c.884 0 1.663-.429 2.159-1.083.248.633.86 1.083 1.58 1.083.645 0 1.199-.364 1.488-.893.27.132.57.213.892.213.882 0 1.329-.582 1.329-.582z"}),a.createElement("path",{fill:"#EEE",d:"M27.964 11H16.357c-1.786 0-2.679.893-2.679 2.679v2.76a2.72 2.72 0 005.235 1.026c.238.205.545.334.883.334.46 0 .865-.23 1.111-.58a2.712 2.712 0 002.288 1.259c.884 0 1.663-.429 2.159-1.083.248.633.86 1.083 1.58 1.083.62 0 1.15-.34 1.447-.837.24.229.564.372.922.372.74 0 1.339-.6 1.339-1.339v-2.995C30.643 11.893 29.75 11 27.964 11z"}))}},61:function(e,t,n){"use strict";var r=n(340),a=se(n(473)),i=se(n(474)),l=se(n(475)),o=se(n(476)),s=se(n(477)),c=se(n(478)),u=se(n(479)),f=se(n(480)),h=se(n(481)),d=se(n(482)),m=se(n(483)),p=se(n(484)),v=se(n(0)),w=se(n(341)),b=se(n(342)),y=se(n(343)),g=se(n(344)),E=se(n(345)),_=se(n(346)),M=se(n(347)),z=se(n(348)),S=se(n(349)),O=se(n(350)),F=se(n(351)),C=se(n(352)),B=se(n(353)),H=se(n(354)),x=se(n(355)),L=se(n(356)),A=se(n(357)),P=se(n(358)),T=se(n(359)),j=se(n(360)),D=se(n(361)),I=se(n(362)),U=se(n(363)),N=se(n(364)),R=se(n(365)),k=se(n(366)),V=se(n(367)),G=se(n(368)),W=se(n(369)),K=se(n(370)),Z=se(n(371)),X=se(n(372)),J=se(n(373)),Y=se(n(374)),q=se(n(375)),Q=se(n(376)),$=se(n(377)),ee=se(n(378)),te=se(n(379)),ne=se(n(380)),re=se(n(381)),ae=se(n(382)),ie=se(n(383)),le=se(n(384)),oe=se(n(385)),n=se(n(386));function se(e){return e&&e.__esModule?e:{default:e}}r=(0,r.createBrowserHistory)(),p={en:a.default,fr:i.default,id:l.default,pt:o.default,it:s.default,de:c.default,ja:u.default,zh:f.default,ko:h.default,ru:d.default,hi:m.default,es:p.default},n=[{code:"ar-SA",name:"Arabic (Saudi Arabia)",svg:v.default.createElement(w.default,null)},{code:"bn-BD",name:"Bangla (Bangladesh)",svg:v.default.createElement(b.default,null)},{code:"bn-IN",name:"Bangla (India)",svg:v.default.createElement(y.default,null)},{code:"cs-CZ",name:"Czech (Czech Republic)",svg:v.default.createElement(g.default,null)},{code:"da-DK",name:"Danish (Denmark)",svg:v.default.createElement(E.default,null)},{code:"de-AT",name:"Austrian German",svg:v.default.createElement(_.default,null)},{code:"de-CH",name:'"Swiss" German',svg:v.default.createElement(M.default,null)},{code:"de-DE",name:"Standard German (as spoken in Germany)",svg:v.default.createElement(z.default,null)},{code:"el-GR",name:"Modern Greek",svg:v.default.createElement(S.default,null)},{code:"en-AU",name:"Australian English",svg:v.default.createElement(O.default,null)},{code:"en-CA",name:"Canadian English",svg:v.default.createElement(F.default,null)},{code:"en-GB",name:"British English",svg:v.default.createElement(C.default,null)},{code:"en-IE",name:"Irish English",svg:v.default.createElement(B.default,null)},{code:"en-IN",name:"Indian English",svg:v.default.createElement(H.default,null)},{code:"en-NZ",name:"New Zealand English",svg:v.default.createElement(x.default,null)},{code:"en-US",name:"US English",svg:v.default.createElement(L.default,null)},{code:"en-ZA",name:"English (South Africa)",svg:v.default.createElement(A.default,null)},{code:"es-AR",name:"Argentine Spanish",svg:v.default.createElement(P.default,null)},{code:"es-CL",name:"Chilean Spanish",svg:v.default.createElement(T.default,null)},{code:"es-CO",name:"Colombian Spanish",svg:v.default.createElement(j.default,null)},{code:"es-ES",name:"Castilian Spanish (as spoken in Central-Northern Spain)",svg:v.default.createElement(D.default,null)},{code:"es-MX",name:"Mexican Spanish",svg:v.default.createElement(I.default,null)},{code:"es-US",name:"American Spanish",svg:v.default.createElement(L.default,null)},{code:"fi-FI",name:"Finnish (Finland)",svg:v.default.createElement(U.default,null)},{code:"fr-BE",name:"Belgian French",svg:v.default.createElement(N.default,null)},{code:"fr-CA",name:"Canadian French",svg:v.default.createElement(F.default,null)},{code:"fr-CH",name:'"Swiss" French',svg:v.default.createElement(M.default,null)},{code:"fr-FR",name:"Standard French (especially in France)",svg:v.default.createElement(R.default,null)},{code:"he-IL",name:"Hebrew (Israel)",svg:v.default.createElement(k.default,null)},{code:"hi-IN",name:"Hindi (India)",svg:v.default.createElement(y.default,null)},{code:"hu-HU",name:"Hungarian (Hungary)",svg:v.default.createElement(V.default,null)},{code:"id-ID",name:"Indonesian (Indonesia)",svg:v.default.createElement(G.default,null)},{code:"it-CH",name:'"Swiss" Italian',svg:v.default.createElement(M.default,null)},{code:"it-IT",name:"Standard Italian (as spoken in Italy)",svg:v.default.createElement(W.default,null)},{code:"ja-JP",name:"Japanese (Japan)",svg:v.default.createElement(K.default,null)},{code:"ko-KR",name:"Korean (Republic of Korea)",svg:v.default.createElement(Z.default,null)},{code:"nl-BE",name:"Belgian Dutch",svg:v.default.createElement(N.default,null)},{code:"nl-NL",name:"Standard Dutch (as spoken in The Netherlands)",svg:v.default.createElement(X.default,null)},{code:"no-NO",name:"Norwegian (Norway)",svg:v.default.createElement(J.default,null)},{code:"pl-PL",name:"Polish (Poland)",svg:v.default.createElement(Y.default,null)},{code:"pt-BR",name:"Brazilian Portuguese",svg:v.default.createElement(q.default,null)},{code:"pt-PT",name:"European Portuguese (as written and spoken in Portugal)",svg:v.default.createElement(Q.default,null)},{code:"ro-RO",name:"Romanian (Romania)",svg:v.default.createElement($.default,null)},{code:"ru-RU",name:"Russian (Russian Federation)",svg:v.default.createElement(ee.default,null)},{code:"sk-SK",name:"Slovak (Slovakia)",svg:v.default.createElement(te.default,null)},{code:"sv-SE",name:"Swedish (Sweden)",svg:v.default.createElement(ne.default,null)},{code:"ta-IN",name:"Indian Tamil",svg:v.default.createElement(y.default,null)},{code:"ta-LK",name:"Sri Lankan Tamil",svg:v.default.createElement(re.default,null)},{code:"th-TH",name:"Thai (Thailand)",svg:v.default.createElement(ae.default,null)},{code:"tr-TR",name:"Turkish (Turkey)",svg:v.default.createElement(ie.default,null)},{code:"zh-CN",name:"Mainland China, simplified characters",svg:v.default.createElement(le.default,null)},{code:"zh-HK",name:"Hong Kong, traditional characters",svg:v.default.createElement(oe.default,null)},{code:"zh-TW",name:"Taiwan, traditional characters",svg:v.default.createElement(n.default,null)}];e.exports={LANGUAGES:["en","fr","id","pt","it","de","ja","zh","ko","ru","hi","es"],DATE_FNS_LOCALE_MAP:p,HISTORY:r,PAGE_ROUTES:[{page_regex:/\/*/,page_name:"unknown",tabs:""},{page_regex:/\/$/,page_name:"home",tabs:""},{page_regex:/\/(settings)$/,page_name:"settings",tabs:""},{page_regex:/\/(pixel)$/,page_name:"pixel",tabs:""}],LOCALES:n,CURRENCY_COUNTRIES:{ARS:["AR"],AUD:["AU","CC","CX","HM","KI","NF","NR","TV"],BDT:["BD"],BRL:["BR"],CAD:["CA"],CHF:["CH","LI"],CLP:["CL"],CNY:["CN"],COP:["CO"],CZK:["CZ"],DKK:["DK","FO","GL"],EUR:["AD","AT","AX","BE","BL","CY","DE","EE","ES","FI","FR","GF","GP","GR","IE","IT","LU","MC","ME","MF","MQ","MT","NL","PM","PT","RE","SI","SK","SM","TF","VA","YT"],GBP:["GB","GG","GS","IM","JE"],HKD:["HK"],HUF:["HU"],IDR:["ID"],ILS:["IL","PS"],INR:["IN"],JPY:["JP"],KRW:["KR"],LKR:["LK"],MXN:["MX"],NOK:["BV","NO","SJ"],NZD:["CK","NU","NZ","PN","TK"],PLN:["PL"],RON:["RO"],RUB:["RU"],SAR:["SA"],SEK:["SE"],THB:["TH"],TRY:["TR"],TWD:["TW"],USD:["AS","BQ","EC","FM","GU","IO","MH","MP","PR","PW","TC","TL","UM","US","VG","VI"],ZAR:["ZA"]},FIRST_WEEK_DAY_BY_COUNTRY:{"001":"mon",AD:"mon",AE:"sat",AF:"sat",AG:"sun",AI:"mon",AL:"mon",AM:"mon",AN:"mon",AR:"mon",AS:"sun",AT:"mon",AU:"sun",AX:"mon",AZ:"mon",BA:"mon",BD:"sun",BE:"mon",BG:"mon",BH:"sat",BM:"mon",BN:"mon",BR:"sun",BS:"sun",BT:"sun",BW:"sun",BY:"mon",BZ:"sun",CA:"sun",CH:"mon",CL:"mon",CM:"mon",CN:"sun",CO:"sun",CR:"mon",CY:"mon",CZ:"mon",DE:"mon",DJ:"sat",DK:"mon",DM:"sun",DO:"sun",DZ:"sat",EC:"mon",EE:"mon",EG:"sat",ES:"mon",ET:"sun",FI:"mon",FJ:"mon",FO:"mon",FR:"mon",GB:"mon","GB-alt-variant":"sun",GE:"mon",GF:"mon",GP:"mon",GR:"mon",GT:"sun",GU:"sun",HK:"sun",HN:"sun",HR:"mon",HU:"mon",ID:"sun",IE:"mon",IL:"sun",IN:"sun",IQ:"sat",IR:"sat",IS:"mon",IT:"mon",JM:"sun",JO:"sat",JP:"sun",KE:"sun",KG:"mon",KH:"sun",KR:"sun",KW:"sat",KZ:"mon",LA:"sun",LB:"mon",LI:"mon",LK:"mon",LT:"mon",LU:"mon",LV:"mon",LY:"sat",MC:"mon",MD:"mon",ME:"mon",MH:"sun",MK:"mon",MM:"sun",MN:"mon",MO:"sun",MQ:"mon",MT:"sun",MV:"fri",MX:"sun",MY:"mon",MZ:"sun",NI:"sun",NL:"mon",NO:"mon",NP:"sun",NZ:"mon",OM:"sat",PA:"sun",PE:"sun",PH:"sun",PK:"sun",PL:"mon",PR:"sun",PT:"sun",PY:"sun",QA:"sat",RE:"mon",RO:"mon",RS:"mon",RU:"mon",SA:"sun",SD:"sat",SE:"mon",SG:"sun",SI:"mon",SK:"mon",SM:"mon",SV:"sun",SY:"sat",TH:"sun",TJ:"mon",TM:"mon",TR:"mon",TT:"sun",TW:"sun",UA:"mon",UM:"sun",US:"sun",UY:"mon",UZ:"mon",VA:"mon",VE:"sun",VI:"sun",VN:"mon",WS:"sun",XK:"mon",YE:"sun",ZA:"sun",ZW:"sun"},UTC_OFFSET_PER_COUNTRIES:{AF:4.3,AL:2,DZ:2,AS:-11,AO:1,AI:-4,AG:-4,AR:-3,AM:4,AW:-4,AU:10,AT:1,AZ:4,BS:-5,BH:3,BD:6,BB:-4,BY:3,BE:1,BZ:-6,BJ:1,BM:-4,BT:6,BO:-4,BA:1,BW:2,BR:-5,BG:2,BF:0,BI:2,KH:7,CM:1,CA:-6,CV:-1,KY:-5,CF:1,TD:1,CL:-3,CN:8,CX:7,CC:6.3,CO:-5,KM:3,CD:1,CK:-10,CR:-6,CI:0,HR:1,CY:2,CZ:1,DK:1,DJ:3,DM:-4,DO:-4,EC:-5,EG:2,SV:-6,GQ:1,ER:3,EE:2,ET:3,FK:-3,FO:0,FJ:12,FI:2,FR:1,GF:-3,PF:-10,GA:1,GM:0,GE:4,DE:1,GH:0,GI:1,GR:2,GL:-3,GD:-4,GP:-4,GU:10,GT:-6,GG:0,GN:0,GW:0,GY:-4,HT:-5,HM:5,VA:1,HN:-6,HK:8,HU:1,IS:0,IN:5.3,ID:7,IR:3.3,IQ:3,IE:0,IM:0,IL:2,IT:1,JM:-5,JP:9,JE:0,JO:2,KZ:5,KE:3,KI:12,KP:8.3,KR:9,KW:3,KG:6,LA:7,LV:2,LB:2,LS:2,LR:0,LI:1,LT:2,LU:1,MK:1,MG:3,MW:2,MY:8,MV:5,ML:0,MT:0,MH:12,MQ:-4,MR:0,MU:4,YT:3,MX:-6,FM:10,MD:2,MC:1,MN:8,MS:-4,MA:0,MZ:2,MM:6.3,NA:1,NR:12,NP:5.45,NL:1,AN:-4,NZ:12,NI:-6,NE:1,NG:1,NU:-11,NF:11.3,MP:10,NO:1,OM:4,PK:5,PW:9,PS:2,PA:-5,PG:10,PY:-4,PE:-5,PH:8,PL:1,PT:0,PR:-4,QA:3,RE:4,RU:0,RW:2,SH:0,KN:-4,LC:-4,PM:-3,VC:-4,WS:13,SM:1,ST:0,SA:3,SN:0,SC:4,SL:0,SG:8,SK:1,SI:1,SB:11,SO:3,ZA:2,GS:-2,ES:1,LK:5.3,SD:3,SR:-3,SJ:1,SZ:2,SE:1,CH:1,SY:2,TW:8,TJ:5,TZ:3,TH:7,TG:0,TK:13,TO:13,TT:13,TN:1,TR:2,TM:5,TV:12,UG:3,UA:2,AE:4,GB:0,US:-6,UY:-3,UZ:5,VU:11,VE:-4.3,VN:7,VG:-4,VI:-4,WF:12,EH:1,YE:3,ZM:1,ZW:2,AX:2,AD:1,AQ:13,BV:1,IO:6,BN:8,CG:1,CU:-5,TF:5,XK:1,LY:2,MO:8,NC:11,PN:-8,RO:2,RS:1,ME:1,TL:9,TC:-5,UM:-11}}},93:function(e,t,n){"use strict";function f(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var l,o=e[Symbol.iterator]();!(r=(l=o.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{!r&&o.return&&o.return()}finally{if(a)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}var h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=w(n(405)),a=w(n(406)),i=w(n(407)),l=w(n(408)),o=w(n(409)),s=w(n(410)),c=w(n(411)),u=w(n(412)),d=w(n(413)),m=w(n(414)),p=w(n(415)),v=w(n(416));function w(e){return e&&e.__esModule?e:{default:e}}function b(e){switch(e){case"en":return r.default;case"fr":return a.default;case"id":return i.default;case"pt":return l.default;case"it":return o.default;case"de":return s.default;case"ja":return c.default;case"zh":return u.default;case"ko":return d.default;case"ru":return m.default;case"hi":return p.default;case"es":return v.default;default:return r.default}}var y=["faw","fluc","flc","fllc","tuc","tlc","aed","ated"];e.exports={t:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};return window.LANG="en",window.LANG_DIR=b(LANG),window.LANG!==document.documentElement.lang&&(window.LANG=document.documentElement.lang,window.LANG_DIR=b(LANG)||b("en")),function(e,t,n,r,a){var e=0<arguments.length&&void 0!==e?e:"",t=1<arguments.length&&void 0!==t?t:{},n=2<arguments.length&&void 0!==n?n:{},s=a,i=!1;Object.entries(t).forEach(function(e){var t=f(e,2),e=t[0];t[1],i=y.includes(e.toLowerCase())}),i&&(n=t,t={});for(var l=e.split("."),o=window.LANG_DIR,c=0;c<l.length-1;c++)o=o[l[c]];var e=o[n.faw||n.FAW?l[l.length-1].replaceAll("'","").replaceAll('"',"").replaceAll(",","").toLowerCase():l[l.length-1]],u=JSON.stringify(e);return Object.entries(t).forEach(function(e){var t,n,r,a,i=f(e,2),l=i[0],o=i[1];(l.length||o.toString())&&("object"===(void 0===o?"undefined":h(o))&&null!==o&&0!==o?(r=(n=f(Object.entries(o),2))[0],n[1],t=(a=f(r,2))[0],e=a[1],t===l&&(n=i=null,r=(a=f(Object.entries(r),2))[0],a=a[1],"_n"===r&&(i=a.few||null,n=a.plenty||null),a=e<=1?s._plurals[t].one:s._plurals[t].many,a=i&&1<e&&e<i?s._plurals[t].few:a,a=n&&n<=e?s._plurals[t].plenty:a,u=u.replace("%n {{{_plurals."+t+"}}}",e+" "+a))):(l="{{"+l+"}}",o=null===o?"":o.toString(),u=u.replaceAll(l,o)))}),u=JSON.parse(u),((n=Object.assign(t,n)).fluc||n.FLUC||n.flc||n.FLC)&&(u=u.charAt(0).toUpperCase()+u.slice(1)),(n.fllc||n.FLLC)&&(u=u.charAt(0).toLowerCase()+u.slice(1)),(n.tuc||n.TUC)&&(u=u.toUpperCase()),(n.tlc||n.TLC)&&(u=u.toLowerCase()),(n.aed||n.AED)&&(u+="."),(n.ated||n.ATED)&&(u+="..."),u}(e,t,n,LANG,LANG_DIR)}}}});